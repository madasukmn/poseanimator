{"id":"rGPK","dependencies":[{"name":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/package.json","includedInParent":true,"mtime":1636789466000},{"name":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1636887546085},{"name":"@tensorflow/tfjs-core","loc":{"line":17,"column":1000},"parent":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js","resolved":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js"},{"name":"buffer","parent":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js","resolved":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar e=require(\"buffer\").Buffer;Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.loadGraphModel=Ue,exports.deregisterOp=m,exports.registerOp=i,exports.version_converter=exports.GraphModel=void 0;var t,a,r=require(\"@tensorflow/tfjs-core\"),n=function(){return(n=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};function s(e,t,a,r){return new(a||(a=Promise))(function(n,s){function o(e){try{i(r.next(e))}catch(e){s(e)}}function p(e){try{i(r.throw(e))}catch(e){s(e)}}function i(e){e.done?n(e.value):new a(function(t){t(e.value)}).then(o,p)}i((r=r.apply(e,t||[])).next())})}function o(e,t){var a,r,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:p(0),throw:p(1),return:p(2)},\"function\"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function p(s){return function(p){return function(s){if(a)throw new TypeError(\"Generator is already executing.\");for(;o;)try{if(a=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{a=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,p])}}}!function(e){e[e.DT_INVALID=0]=\"DT_INVALID\",e[e.DT_FLOAT=1]=\"DT_FLOAT\",e[e.DT_DOUBLE=2]=\"DT_DOUBLE\",e[e.DT_INT32=3]=\"DT_INT32\",e[e.DT_UINT8=4]=\"DT_UINT8\",e[e.DT_INT16=5]=\"DT_INT16\",e[e.DT_INT8=6]=\"DT_INT8\",e[e.DT_STRING=7]=\"DT_STRING\",e[e.DT_COMPLEX64=8]=\"DT_COMPLEX64\",e[e.DT_INT64=9]=\"DT_INT64\",e[e.DT_BOOL=10]=\"DT_BOOL\",e[e.DT_QINT8=11]=\"DT_QINT8\",e[e.DT_QUINT8=12]=\"DT_QUINT8\",e[e.DT_QINT32=13]=\"DT_QINT32\",e[e.DT_BFLOAT16=14]=\"DT_BFLOAT16\",e[e.DT_FLOAT_REF=101]=\"DT_FLOAT_REF\",e[e.DT_DOUBLE_REF=102]=\"DT_DOUBLE_REF\",e[e.DT_INT32_REF=103]=\"DT_INT32_REF\",e[e.DT_UINT8_REF=104]=\"DT_UINT8_REF\",e[e.DT_INT16_REF=105]=\"DT_INT16_REF\",e[e.DT_INT8_REF=106]=\"DT_INT8_REF\",e[e.DT_STRING_REF=107]=\"DT_STRING_REF\",e[e.DT_COMPLEX64_REF=108]=\"DT_COMPLEX64_REF\",e[e.DT_INT64_REF=109]=\"DT_INT64_REF\",e[e.DT_BOOL_REF=110]=\"DT_BOOL_REF\",e[e.DT_QINT8_REF=111]=\"DT_QINT8_REF\",e[e.DT_QUINT8_REF=112]=\"DT_QUINT8_REF\",e[e.DT_QINT32_REF=113]=\"DT_QINT32_REF\",e[e.DT_BFLOAT16_REF=114]=\"DT_BFLOAT16_REF\"}(t||(t={})),function(e){!function(e){e[e.LEGACY=0]=\"LEGACY\",e[e.V1=1]=\"V1\",e[e.V2=2]=\"V2\"}(e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(a||(a={}));var p={};function i(e,t){var a={tfOpName:e,category:\"custom\",inputs:[],attrs:[],customExecutor:t};p[e]=a}function u(e){return p[e]}function m(e){delete p[e]}function c(e,t,a,r){var n=t.inputParams[e];if(n&&void 0!==n.inputIndexStart){var s=n.inputIndexStart,o=0===n.inputIndexEnd?void 0:void 0===n.inputIndexEnd?s+1:n.inputIndexEnd;if(\"tensor\"===n.type)return d(t.inputNames[n.inputIndexStart],a,r);if(\"tensors\"===n.type)return t.inputNames.slice(s,o).map(function(e){return d(e,a,r)});var p=Array.prototype.slice.call(d(t.inputNames.slice(s)[0],a,r).dataSync());return\"number\"===n.type?p[0]:p}var i=t.attrParams[e];return i&&i.value}function d(e,t,a){var r=h(e),n=r[0],s=r[1],o=a.currentContextIds.find(function(e){return!!t[f(n,e)]});return void 0!==o?t[f(n,o)][s]:void 0}function y(e,t,a){return t[f(e,a.currentContextId)]}function l(e,t){var a=h(e),r=a[0],n=a[1];return[f(r,t&&t.currentContextId),n]}function f(e,t){return t?e+\"-\"+t:e}function h(e){var t=e.lastIndexOf(\":\");return-1===t?[e,0]:[e.substring(0,t),Number(e.substring(t+1))]}function N(e,t){for(var a=[],r=0;r<e.length;r+=t)a.push(e.slice(r,r+t));return a}var g=[{tfOpName:\"Add\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddV2\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddN\",category:\"arithmetic\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"BiasAdd\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sub\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"RealDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Div\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"DivNoNan\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mul\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Maximum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}]},{tfOpName:\"Minimum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}]},{tfOpName:\"Pow\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SquaredDifference\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorMod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],b=Object.freeze({json:g}),x=[{tfOpName:\"Abs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan2\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ceil\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ClipByValue\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"clip_value_min\",name:\"clipValueMin\",type:\"number\"},{tfName:\"clip_value_max\",name:\"clipValueMax\",type:\"number\"}]},{tfOpName:\"Complex\",category:\"basic_math\",inputs:[{start:0,name:\"real\",type:\"tensor\"},{start:1,name:\"imag\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ComplexAbs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Elu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Exp\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Floor\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Imag\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Neg\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Real\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"alpha\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu6\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"clipValueMin\",name:\"clipValueMin\",type:\"number\",defaultValue:0},{tfName:\"clipValueMax\",name:\"clipValueMax\",type:\"number\",defaultValue:6}]},{tfOpName:\"Selu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sigmoid\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Rsqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Square\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sign\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Round\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Expm1\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log1p\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Reciprocal\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Softplus\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Erf\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prod\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axes\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LeakyRelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:.2},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],v=Object.freeze({json:x}),T=[{tfOpName:\"LoopCond\",category:\"control\",inputs:[{start:0,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Switch\",category:\"control\",inputs:[{start:0,name:\"data\",type:\"tensor\"},{start:1,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Merge\",category:\"control\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"Enter\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"frame_name\",name:\"frameName\",type:\"string\"},{tfName:\"is_constant\",name:\"isConstant\",type:\"bool\"}]},{tfOpName:\"Exit\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NextIteration\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayV3\",category:\"control\",inputs:[{start:0,name:\"size\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"},{tfName:\"dynamic_size\",name:\"dynamicSize\",type:\"bool\"},{tfName:\"clear_after_read\",name:\"clearAfterRead\",type:\"bool\"},{tfName:\"identical_element_shapes\",name:\"identicalElementShapes\",type:\"bool\"},{tfName:\"tensor_array_name\",name:\"name\",type:\"string\"}]},{tfOpName:\"TensorArrayWriteV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayReadV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayGatherV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"}]},{tfOpName:\"TensorArrayScatterV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArrayConcatV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape_except0\",name:\"elementShapeExcept0\",type:\"shape\",notSupported:!0}]},{tfOpName:\"TensorArraySplitV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"tensor\",type:\"tensor\"},{start:2,name:\"lengths\",type:\"number[]\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArraySizeV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"},{start:1,name:\"flowIn\",type:\"number\"}]},{tfOpName:\"TensorArrayCloseV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"number\"}]}],O=Object.freeze({json:T}),S=[{tfOpName:\"AvgPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AvgPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Conv1D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"stride\",name:\"stride\",type:\"number\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NWC\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"dilation\",name:\"dilation\",type:\"number\",defaultValue:1}]},{tfOpName:\"Conv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"useCudnnOnGpu\",name:\"useCudnnOnGpu\",type:\"bool\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"_FusedConv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]},{tfName:\"use_cudnn_on_gpu\",name:\"useCudnnOnGpu\",type:\"bool\",defaultValue:!0},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4}]},{tfOpName:\"Conv2DBackpropInput\",category:\"convolution\",inputs:[{start:2,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:0,name:\"outputShape\",type:\"number[]\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"DepthwiseConv2d\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"DepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"FusedDepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]}]},{tfOpName:\"Conv3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]}],_=Object.freeze({json:S}),w=[{tfOpName:\"Fill\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"},{start:1,name:\"value\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"LinSpace\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"num\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"OneHot\",category:\"creation\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"depth\",type:\"number\"},{start:2,name:\"onValue\",type:\"number\",defaultValue:1},{start:3,name:\"offValue\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ones\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"OnesLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"RandomUniform\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"minval\",name:\"minval\",type:\"number\",defaultValue:0},{tfName:\"maxval\",name:\"maxval\",type:\"number\",defaultValue:1},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"seed\",name:\"seed\",type:\"number\",defaultValue:0},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Range\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"step\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"Tidx\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TruncatedNormal\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"means\",name:\"mean\",type:\"number\",defaultValue:0},{tfName:\"stddev\",name:\"stdDev\",type:\"number\",defaultValue:1},{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Zeros\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ZerosLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Multinomial\",category:\"creation\",inputs:[{start:0,name:\"logits\",type:\"tensor\"},{start:1,name:\"numSamples\",type:\"number\"}],attrs:[{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\"},{tfName:\"output_dtype\",name:\"output_dtype\",type:\"dtype\"}]}],A=Object.freeze({json:w}),D=[{tfOpName:\"NonMaxSuppressionV2\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV3\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV5\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"},{start:5,name:\"softNmsSigma\",type:\"number\"}]},{tfOpName:\"Where\",category:\"dynamic\",inputs:[{start:0,name:\"condition\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ListDiff\",category:\"dynamic\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],E=Object.freeze({json:D}),V=[{tfOpName:\"TopKV2\",category:\"evaluation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"k\",type:\"number\"}],attrs:[{tfName:\"sorted\",name:\"sorted\",type:\"bool\"}]}],I=Object.freeze({json:V}),M=[{tfOpName:\"PlaceholderWithDefault\",category:\"graph\",inputs:[{start:0,name:\"default\",type:\"tensor\"}],attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Placeholder\",category:\"graph\",attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Const\",category:\"graph\"},{tfOpName:\"Identity\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IdentityN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Snapshot\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Rank\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Size\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Shape\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"ShapeN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Print\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"data\",type:\"tensors\"}],attrs:[{tfName:\"message\",name:\"message\",type:\"string\"},{tfName:\"first_n\",name:\"firstN\",type:\"number\",notSupported:!0},{tfName:\"summarize\",name:\"summarize\",type:\"number\",defaultValue:3}]},{tfOpName:\"NoOp\",category:\"graph\",inputs:[]},{tfOpName:\"StopGradient\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"FakeQuantWithMinMaxVars\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"min\",name:\"min\",type:\"number\"},{tfName:\"max\",name:\"max\",type:\"number\"}]}],k=Object.freeze({json:M}),C=[{tfOpName:\"ResizeBilinear\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ResizeNearestNeighbor\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"CropAndResize\",category:\"image\",inputs:[{start:0,name:\"image\",type:\"tensor\"},{start:1,name:\"boxes\",type:\"tensor\"},{start:2,name:\"boxInd\",type:\"tensor\"},{start:3,name:\"cropSize\",type:\"number[]\"}],attrs:[{tfName:\"method\",name:\"method\",type:\"string\"},{tfName:\"extrapolation_value\",name:\"extrapolationValue\",type:\"number\"}]}],z=Object.freeze({json:C}),F=[{tfOpName:\"Equal\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NotEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Greater\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"GreaterEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Less\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LessEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalAnd\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalNot\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalOr\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Select\",category:\"logical\",inputs:[{start:0,name:\"condition\",type:\"tensor\"},{start:1,name:\"a\",type:\"tensor\"},{start:2,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],j=Object.freeze({json:F}),R=[{tfOpName:\"_FusedMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4},{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMulV2\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Transpose\",category:\"matrices\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"perm\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],P=Object.freeze({json:R}),L=[{tfOpName:\"FusedBatchNorm\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV2\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV3\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"LRN\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"depth_radius\",name:\"radius\",type:\"number\",defaultValue:5},{tfName:\"bias\",name:\"bias\",type:\"number\",defaultValue:1},{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:1},{tfName:\"beta\",name:\"beta\",type:\"number\",defaultValue:.5}]},{tfOpName:\"Softmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"LogSoftmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"normalization\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!0,notSupported:!0}]}],B=Object.freeze({json:L}),q=[{tfOpName:\"Max\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Mean\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Min\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Sum\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"All\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Any\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"ArgMax\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"ArgMin\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"Prod\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]}],U=Object.freeze({json:q}),G=[{tfOpName:\"ConcatV2\",category:\"slice_join\",inputs:[{start:0,end:-1,name:\"tensors\",type:\"tensors\"},{start:-1,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"Concat\",category:\"slice_join\",inputs:[{start:1,end:0,name:\"tensors\",type:\"tensors\"},{start:0,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"GatherV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"Gather\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0},{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",notSupported:!0}]},{tfOpName:\"Reverse\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"dims\",type:\"bool\",notSupported:!0}]},{tfOpName:\"ReverseV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}]},{tfOpName:\"Slice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"size\",type:\"number[]\"}]},{tfOpName:\"StridedSlice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"end\",type:\"number[]\"},{start:3,name:\"strides\",type:\"number[]\"}],attrs:[{tfName:\"begin_mask\",name:\"beginMask\",type:\"number\",defaultValue:0},{tfName:\"end_mask\",name:\"endMask\",type:\"number\",defaultValue:0},{tfName:\"new_axis_mask\",name:\"newAxisMask\",type:\"number\",defaultValue:0},{tfName:\"ellipsis_mask\",name:\"ellipsisMask\",type:\"number\",defaultValue:0},{tfName:\"shrink_axis_mask\",name:\"shrinkAxisMask\",type:\"number\",defaultValue:0}]},{tfOpName:\"Pack\",category:\"slice_join\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"Unpack\",category:\"slice_join\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0},{tfName:\"num\",name:\"num\",type:\"number\",defaultValue:0,notSupported:!0}]},{tfOpName:\"Tile\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"reps\",type:\"number[]\"}]},{tfOpName:\"Split\",category:\"slice_join\",inputs:[{start:0,name:\"axis\",type:\"number\",defaultValue:0},{start:1,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"num_split\",name:\"numOrSizeSplits\",type:\"number\",defaultValue:1}]},{tfOpName:\"SplitV\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"numOrSizeSplits\",type:\"number[]\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"ScatterNd\",category:\"slice_join\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"values\",type:\"tensor\"},{start:2,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"GatherNd\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"slice_join\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!1,notSupported:!0}]}],W=Object.freeze({json:G}),H=[{tfOpName:\"FFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"RFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]},{tfOpName:\"IRFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]}],Q=Object.freeze({json:H}),K=[{tfOpName:\"Cast\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"SrcT\",name:\"sdtype\",type:\"dtype\",notSupported:!0},{tfName:\"DstT\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ExpandDims\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"Pad\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"}],attrs:[{tfName:\"constant_value\",name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"PadV2\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"},{start:2,name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"Reshape\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"Squeeze\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"axis\",tfDeprecatedName:\"squeeze_dims\",name:\"axis\",type:\"number[]\"}]},{tfOpName:\"SpaceToBatchND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"paddings\",type:\"number[]\"}]},{tfOpName:\"BatchToSpaceND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"crops\",type:\"number[]\"}]},{tfOpName:\"DepthToSpace\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"block_size\",name:\"blockSize\",type:\"number\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\"}]}],X=Object.freeze({json:K}),Z=function(){function e(){var e=[b,v,O,_,A,E,I,j,z,k,P,B,U,W,Q,X],t=[].concat.apply([],e.map(function(e){return e.json}));this.opMappers=t.reduce(function(e,t){return e[t.tfOpName]=t,e},{})}return Object.defineProperty(e,\"Instance\",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),e.prototype.transformGraph=function(e,t){var a=this;void 0===t&&(t={});var r=[],n=[],s=e.node.reduce(function(e,t){return e[t.name]=a.mapNode(t),t.op.startsWith(\"Placeholder\")&&r.push(e[t.name]),\"Const\"===t.op&&n.push(e[t.name]),e},{}),o=[],p=[],i={},u={};null!=t&&(i=this.mapSignatureEntries(t.inputs),u=this.mapSignatureEntries(t.outputs));var m=Object.keys(s);return m.forEach(function(e){var t=s[e];t.inputNames.forEach(function(e){var a=l(e)[0];t.inputs.push(s[a]),s[a].children.push(t)})}),0===Object.keys(u).length?m.forEach(function(e){var t=s[e];0===t.children.length&&p.push(t)}):Object.keys(u).forEach(function(e){var t=l(e)[0],a=s[t];null!=a&&(a.signatureKey=u[e],p.push(a))}),Object.keys(i).length>0?Object.keys(i).forEach(function(e){var t=l(e)[0],a=s[t];a&&(a.signatureKey=i[e],o.push(a))}):o=r,{nodes:s,inputs:o,outputs:p,weights:n,placeholders:r,signature:t}},e.prototype.mapSignatureEntries=function(e){return Object.keys(e||{}).reduce(function(t,a){return t[e[a].name]=a,t},{})},e.prototype.mapNode=function(e){var t=u(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});var a={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(function(e){return e.startsWith(\"^\")?e.substr(1):e}),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(a.inputParams=t.inputs.reduce(function(e,t){return e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e},{})),null!=t.attrs&&(a.attrParams=t.attrs.reduce(function(t,a){var r=a.type,n=void 0;switch(a.type){case\"string\":void 0===(n=$(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=$(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"string[]\":void 0===(n=ie(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=ie(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"number\":void 0===(n=te(e.attr,a.tfName,a.defaultValue||0))&&a.tfDeprecatedName&&(n=te(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"number[]\":void 0===(n=pe(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=pe(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"bool\":void 0===(n=ee(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=ee(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"bool[]\":void 0===(n=me(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=me(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"shape\":void 0===(n=oe(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=oe(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"shape[]\":void 0===(n=ue(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=ue(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"dtype\":void 0===(n=re(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=re(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"dtype[]\":void 0===(n=ne(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=ne(e.attr,a.tfDeprecatedName,a.defaultValue));break;case\"tensor\":case\"tensors\":break;default:throw new Error(\"Unsupported param type: \"+a.type+\" for op: \"+e.op)}return t[a.name]={value:n,type:r},t},{})),a},e}();function Y(t){var a=(0,r.env)().global;if(void 0!==a.atob)return a.atob(t);if(void 0!==e)return new e(t,\"base64\").toString();throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\")}function J(e,t){var a=Array.isArray(e)?String.fromCharCode.apply(null,e):Y(e);return t?a:a.toLowerCase()}function $(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return null!=n?J(n.s,r):a}function ee(e,t,a){var r=e[t];return r?r.b:a}function te(e,t,a){var r=e[t]||{},n=null!=r.i?r.i:null!=r.f?r.f:a;return\"number\"==typeof n?n:parseInt(n,10)}function ae(e){switch(\"string\"==typeof e&&(e=t[e]),e){case t.DT_FLOAT:return\"float32\";case t.DT_INT32:case t.DT_INT64:return\"int32\";case t.DT_BOOL:return\"bool\";case t.DT_DOUBLE:return\"float32\";case t.DT_STRING:return\"string\";default:return null}}function re(e,t,a){var r=e[t];return r&&r.type?ae(r.type):a}function ne(e,t,a){var r=e[t];return r&&r.list&&r.list.type?r.list.type.map(function(e){return ae(e)}):a}function se(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(function(e){return\"number\"==typeof e.size?e.size:parseInt(e.size,10)}):[]}function oe(e,t,a){var r=e[t];return r&&r.shape?se(r.shape):a}function pe(e,t,a){var r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(function(e){return\"number\"==typeof e?e:parseInt(e,10)}):a}function ie(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return n&&n.list&&n.list.s?n.list.s.map(function(e){return J(e,r)}):a}function ue(e,t,a){var r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(function(e){return se(e)}):a}function me(e,t,a){var r=e[t];return r&&r.list&&r.list.b?r.list.b:a}var ce=function(){function e(e,t,a){var r=this;this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(function(e){return r.getInput(e)}),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(function(e,t){return e[t]=r.getAttr(t),e},{}))}return e.prototype.getInput=function(e){return d(e,this.tensorMap,this.context)},e.prototype.getAttr=function(e,t){var a=this.node.rawAttrs[e];if(null!=a.tensor)return d(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return te(this.node.rawAttrs,e,t);if(null!=a.s)return $(this.node.rawAttrs,e,t);if(null!=a.b)return ee(this.node.rawAttrs,e,t);if(null!=a.shape)return oe(this.node.rawAttrs,e,t);if(null!=a.type)return re(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return pe(this.node.rawAttrs,e,t);if(null!=a.list.s)return ie(this.node.rawAttrs,e,t);if(null!=a.list.shape)return ue(this.node.rawAttrs,e,t);if(null!=a.list.b)return me(this.node.rawAttrs,e,t);if(null!=a.list.type)return ne(this.node.rawAttrs,e,t)}return t},e}(),de=function(e,t,a){switch(e.op){case\"BiasAdd\":case\"AddV2\":case\"Add\":return[(0,r.add)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"AddN\":return[(0,r.addN)(c(\"tensors\",e,t,a))];case\"FloorMod\":case\"Mod\":return[(0,r.mod)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"Mul\":return[(0,r.mul)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"RealDiv\":case\"Div\":return[(0,r.div)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"DivNoNan\":return[(0,r.divNoNan)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"FloorDiv\":return[(0,r.floorDiv)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"Sub\":return[(0,r.sub)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"Minimum\":return[(0,r.minimum)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"Maximum\":return[(0,r.maximum)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"Pow\":return[(0,r.pow)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"SquaredDifference\":return[(0,r.squaredDifference)(c(\"a\",e,t,a),c(\"b\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},ye=function(e,t,a){switch(e.op){case\"Abs\":case\"ComplexAbs\":return[(0,r.abs)(c(\"x\",e,t,a))];case\"Acos\":return[(0,r.acos)(c(\"x\",e,t,a))];case\"Acosh\":return[(0,r.acosh)(c(\"x\",e,t,a))];case\"Asin\":return[(0,r.asin)(c(\"x\",e,t,a))];case\"Asinh\":return[(0,r.asinh)(c(\"x\",e,t,a))];case\"Atan\":return[(0,r.atan)(c(\"x\",e,t,a))];case\"Atan2\":return[(0,r.atan2)(c(\"x\",e,t,a),c(\"y\",e,t,a))];case\"Atanh\":return[(0,r.atanh)(c(\"x\",e,t,a))];case\"Ceil\":return[(0,r.ceil)(c(\"x\",e,t,a))];case\"Complex\":return[(0,r.complex)(c(\"real\",e,t,a),c(\"imag\",e,t,a))];case\"Cos\":return[(0,r.cos)(c(\"x\",e,t,a))];case\"Cosh\":return[(0,r.cosh)(c(\"x\",e,t,a))];case\"Elu\":return[(0,r.elu)(c(\"x\",e,t,a))];case\"Erf\":return[(0,r.erf)(c(\"x\",e,t,a))];case\"Exp\":return[(0,r.exp)(c(\"x\",e,t,a))];case\"Expm1\":return[(0,r.expm1)(c(\"x\",e,t,a))];case\"Floor\":return[(0,r.floor)(c(\"x\",e,t,a))];case\"Log\":return[(0,r.log)(c(\"x\",e,t,a))];case\"Log1p\":return[(0,r.log1p)(c(\"x\",e,t,a))];case\"Imag\":return[(0,r.imag)(c(\"x\",e,t,a))];case\"Neg\":return[(0,r.neg)(c(\"x\",e,t,a))];case\"Reciprocal\":return[(0,r.reciprocal)(c(\"x\",e,t,a))];case\"Real\":return[(0,r.real)(c(\"x\",e,t,a))];case\"Relu\":return[(0,r.relu)(c(\"x\",e,t,a))];case\"Round\":return[(0,r.round)(c(\"x\",e,t,a))];case\"Selu\":return[(0,r.selu)(c(\"x\",e,t,a))];case\"Sigmoid\":return[(0,r.sigmoid)(c(\"x\",e,t,a))];case\"Sin\":return[(0,r.sin)(c(\"x\",e,t,a))];case\"Sign\":return[(0,r.sign)(c(\"x\",e,t,a))];case\"Sinh\":return[(0,r.sinh)(c(\"x\",e,t,a))];case\"Softplus\":return[(0,r.softplus)(c(\"x\",e,t,a))];case\"Sqrt\":return[(0,r.sqrt)(c(\"x\",e,t,a))];case\"Square\":return[(0,r.square)(c(\"x\",e,t,a))];case\"Tanh\":return[(0,r.tanh)(c(\"x\",e,t,a))];case\"Tan\":return[(0,r.tan)(c(\"x\",e,t,a))];case\"Relu6\":case\"ClipByValue\":return[(0,r.clipByValue)(c(\"x\",e,t,a),c(\"clipValueMin\",e,t,a),c(\"clipValueMax\",e,t,a))];case\"Rsqrt\":return[(0,r.rsqrt)(d(e.inputNames[0],t,a))];case\"Prod\":return[(0,r.prod)(c(\"x\",e,t,a),c(\"axes\",e,t,a))];case\"LeakyRelu\":return[(0,r.leakyRelu)(c(\"x\",e,t,a),c(\"alpha\",e,t,a))];case\"Prelu\":return[(0,r.prelu)(c(\"x\",e,t,a),c(\"alpha\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},le=function(){function e(t,a,r,n,s,o,p){this.name=t,this.dtype=a,this.maxSize=r,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=o,this.clearAfterRead=p,this.tensors=[],this.closed_=!1,this.id=e.nextId++}return Object.defineProperty(e.prototype,\"closed\",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),e.prototype.clearAndClose=function(){this.tensors.forEach(function(e){return e.tensor.dispose()}),this.tensors=[],this.closed_=!0},e.prototype.size=function(){return this.tensors.length},e.prototype.read=function(e){if(this.closed_)throw new Error(\"TensorArray \"+this.name+\" has already been closed.\");if(e<0||e>=this.tensors.length)throw new Error(\"Tried to read from index \"+e+\", but array size is: \"+this.tensors.length);var t=this.tensors[e];if(t.cleared)throw new Error(\"TensorArray \"+this.name+\": Could not read index \"+e+\" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).\");return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor},e.prototype.readMany=function(e){var t=this;return e.map(function(e){return t.read(e)})},e.prototype.write=function(e,t){if(this.closed_)throw new Error(\"TensorArray \"+this.name+\" has already been closed.\");if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(\"Tried to write to index \"+e+\", but array is not resizeable and size is: \"+this.maxSize);var a=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\",\\n          because the value dtype is \"+t.dtype+\", but TensorArray dtype is \"+this.dtype+\".\");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),this.assertShapesMatchAllowUndefinedSize(this.elementShape,t.shape,\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\".\"),a&&a.read)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\", because it has already been read.\");if(a&&a.written)throw new Error(\"TensorArray \"+this.name+\": Could not write to TensorArray index \"+e+\", because it has already been written.\");a.tensor=t,a.written=!0,this.tensors[e]=a},e.prototype.writeMany=function(e,t){var a=this;if(e.length!==t.length)throw new Error(\"TensorArray \"+this.name+\": could not write multiple tensors,because the index size: \"+e.length+\" is not the same as tensors size: \"+t.length+\".\");e.forEach(function(e,r){return a.write(e,t[r])})},e.prototype.gather=function(e,t){if(t&&t!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but gather requested dtype \"+t);if(!e){e=[];for(var a=0;a<this.size();a++)e.push(a)}if(0===e.length)return(0,r.tensor)([],[0].concat(this.elementShape));var n=this.readMany(e);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,n[0].shape,\"TensorArray shape mismatch: \"),(0,r.stack)(n,0)},e.prototype.concat=function(e){if(e&&e!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but concat requested dtype \"+e);if(0===this.size())return(0,r.tensor)([],[0].concat(this.elementShape));for(var t=[],a=0;a<this.size();a++)t.push(a);var n=this.readMany(t);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,n[0].shape,\"TensorArray shape mismatch: tensor array shape (\"+this.elementShape+\") vs first tensor shape (\"+n[0].shape+\")\"),(0,r.concat)(n,0)},e.prototype.scatter=function(e,t){if(t.dtype!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but tensor has dtype \"+t.dtype);if(e.length!==t.shape[0])throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \"+e.length+\" vs. \"+t.shape[0]);var a=Math.max.apply(Math,e);if(!this.dynamicSize&&a>=this.maxSize)throw new Error(\"Max index must be < array size (\"+a+\"  vs. \"+this.maxSize+\")\");this.writeMany(e,(0,r.unstack)(t,0))},e.prototype.split=function(e,t){var a=this;if(t.dtype!==this.dtype)throw new Error(\"TensorArray dtype is \"+this.dtype+\" but tensor has dtype \"+t.dtype);var n=0,s=e.map(function(e){return n+=e});if(n!==t.shape[0])throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \"+n+\", and tensor's shape is: \"+t.shape);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(\"TensorArray's size is not equal to the size of lengths (\"+this.maxSize+\" vs. \"+e.length+\"), and the TensorArray is not marked as dynamically resizeable\");var o=0===n?0:t.size/n,p=[];(0,r.tidy)(function(){t=t.reshape([1,n,o]);for(var i=0;i<e.length;++i){var u=[0,0===i?0:s[i-1],0],m=[1,e[i],o];p[i]=(0,r.slice)(t,u,m).reshape(a.elementShape)}return p});for(var i=[],u=0;u<e.length;u++)i[u]=u;this.writeMany(i,p)},e.prototype.assertShapesMatchAllowUndefinedSize=function(e,t,a){void 0===a&&(a=\"\"),r.util.assert(this.shapesEqualAllowUndefinedSize(e,t),function(){return a+\" Shapes \"+e+\" and \"+t+\" must match\"})},e.prototype.shapesEqualAllowUndefinedSize=function(e,t){if(e.length!==t.length)return!1;for(var a=0;a<e.length;a++)if(-1!==e[a]&&-1!==t[a]&&e[a]!==t[a])return!1;return!0},e.nextId=0,e}(),fe=void 0,he=function(e,t,a){return s(fe,void 0,void 0,function(){var n,s,p,i,u,m,y,l,f,h,N,g,b,x,v,T,O,S,_,w,A,D,E,V,I,M,k,C,z,F,j,R,P,L,B;return o(this,function(o){switch(o.label){case 0:switch(e.op){case\"LoopCond\":return[3,1];case\"Switch\":return[3,2];case\"Merge\":return[3,4];case\"Enter\":return[3,5];case\"Exit\":return[3,6];case\"NextIteration\":return[3,7];case\"TensorArrayV3\":return[3,8];case\"TensorArrayWriteV3\":return[3,9];case\"TensorArrayReadV3\":return[3,10];case\"TensorArrayGatherV3\":return[3,11];case\"TensorArrayScatterV3\":return[3,12];case\"TensorArrayConcatV3\":return[3,13];case\"TensorArraySplitV3\":return[3,14];case\"TensorArraySizeV3\":return[3,15];case\"TensorArrayCloseV3\":return[3,16]}return[3,17];case 1:return[2,[c(\"pred\",e,t,a).clone()]];case 2:return n=c(\"pred\",e,t,a),s=c(\"data\",e,t,a),[4,n.data()];case 3:return[2,o.sent()[0]?[void 0,s.clone()]:[s.clone(),void 0]];case 4:return[2,(p=e.inputNames.find(function(e){return void 0!==d(e,t,a)}))?[d(p,t,a).clone()]:void 0];case 5:return i=c(\"frameName\",e,t,a),u=c(\"tensor\",e,t,a),a.enterFrame(i),[2,[u.clone()]];case 6:return m=c(\"tensor\",e,t,a),a.exitFrame(),[2,[m.clone()]];case 7:return y=c(\"tensor\",e,t,a),a.nextIteration(),[2,[y.clone()]];case 8:return l=c(\"size\",e,t,a),f=c(\"dtype\",e,t,a),h=c(\"elementShape\",e,t,a),N=c(\"dynamicSize\",e,t,a),g=c(\"clearAfterRead\",e,t,a),b=c(\"identicalElementShapes\",e,t,a),x=c(\"name\",e,t,a),v=new le(x,f,l,h,b,N,g),a.addTensorArray(v),[2,[(0,r.scalar)(v.id),(0,r.scalar)(1)]];case 9:return T=c(\"tensorArrayId\",e,t,a),O=c(\"index\",e,t,a),S=c(\"tensor\",e,t,a),a.getTensorArray(T).write(O,S),[2,[(0,r.scalar)(1)]];case 10:return _=c(\"tensorArrayId\",e,t,a),w=c(\"index\",e,t,a),[2,[a.getTensorArray(_).read(w)]];case 11:return A=c(\"tensorArrayId\",e,t,a),D=c(\"indices\",e,t,a),E=c(\"dtype\",e,t,a),[2,[a.getTensorArray(A).gather(D,E)]];case 12:return V=c(\"tensorArrayId\",e,t,a),I=c(\"indices\",e,t,a),M=c(\"tensor\",e,t,a),a.getTensorArray(V).scatter(I,M),[2,[(0,r.scalar)(1)]];case 13:return k=c(\"tensorArrayId\",e,t,a),C=a.getTensorArray(k),z=c(\"dtype\",e,t,a),[2,[C.concat(z)]];case 14:return F=c(\"tensorArrayId\",e,t,a),j=c(\"tensor\",e,t,a),R=c(\"lengths\",e,t,a),a.getTensorArray(F).split(R,j),[2,[(0,r.scalar)(1)]];case 15:return P=c(\"tensorArrayId\",e,t,a),L=a.getTensorArray(P),[2,[(0,r.scalar)(L.size(),\"int32\")]];case 16:return B=c(\"tensorArrayId\",e,t,a),a.getTensorArray(B).clearAndClose(),[2,[(0,r.scalar)(0)]];case 17:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}})})},Ne=function(e,t,a){switch(e.op){case\"Conv1D\":var n=c(\"stride\",e,t,a),s=c(\"pad\",e,t,a),o=c(\"dataFormat\",e,t,a).toUpperCase(),p=c(\"dilation\",e,t,a);return[(0,r.conv1d)(c(\"x\",e,t,a),c(\"filter\",e,t,a),n,s,o,p)];case\"Conv2D\":n=c(\"strides\",e,t,a),s=c(\"pad\",e,t,a),o=c(\"dataFormat\",e,t,a).toUpperCase();var i=c(\"dilations\",e,t,a);return[(0,r.conv2d)(c(\"x\",e,t,a),c(\"filter\",e,t,a),[n[1],n[2]],s,o,[i[1],i[2]])];case\"_FusedConv2D\":case\"FusedDepthwiseConv2dNative\":var u=c(\"fusedOps\",e,t,a),m=u[0],d=u[1],y=\"biasadd\"===m,l=\"prelu\"===d,f=\"fusedbatchnorm\"===m,h=c(\"numArgs\",e,t,a);if(y){if(l&&2!==h)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!l&&1!==h)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.\")}if(f)throw new Error(\"FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.\");n=c(\"strides\",e,t,a),s=c(\"pad\",e,t,a),o=c(\"dataFormat\",e,t,a).toUpperCase(),i=c(\"dilations\",e,t,a);var N=c(\"args\",e,t,a),g=N[0],b=N[1];return[(\"_FusedConv2D\"===e.op?r.fused.conv2d:r.fused.depthwiseConv2d)({x:c(\"x\",e,t,a),filter:c(\"filter\",e,t,a),strides:[n[1],n[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:g,activation:d,preluActivationWeights:b})];case\"Conv2DBackpropInput\":case\"Conv2dTranspose\":var x=c(\"outputShape\",e,t,a);return n=c(\"strides\",e,t,a),s=c(\"pad\",e,t,a),[(0,r.conv2dTranspose)(c(\"x\",e,t,a),c(\"filter\",e,t,a),x,[n[1],n[2]],s)];case\"DepthwiseConv2dNative\":case\"DepthwiseConv2d\":return n=c(\"strides\",e,t,a),s=c(\"pad\",e,t,a),i=c(\"dilations\",e,t,a),o=c(\"dataFormat\",e,t,a).toUpperCase(),[(0,r.depthwiseConv2d)(c(\"input\",e,t,a),c(\"filter\",e,t,a),[n[1],n[2]],s,o,[i[1],i[2]])];case\"Conv3D\":return n=c(\"strides\",e,t,a),s=c(\"pad\",e,t,a),o=c(\"dataFormat\",e,t,a).toUpperCase(),i=c(\"dilations\",e,t,a),[(0,r.conv3d)(c(\"x\",e,t,a),c(\"filter\",e,t,a),[n[1],n[2],n[3]],s,o,[i[1],i[2],i[3]])];case\"AvgPool\":n=c(\"strides\",e,t,a),s=c(\"pad\",e,t,a);var v=c(\"kernelSize\",e,t,a);return[(0,r.avgPool)(c(\"x\",e,t,a),[v[1],v[2]],[n[1],n[2]],s)];case\"MaxPool\":return n=c(\"strides\",e,t,a),s=c(\"pad\",e,t,a),v=c(\"kernelSize\",e,t,a),[(0,r.maxPool)(c(\"x\",e,t,a),[v[1],v[2]],[n[1],n[2]],s)];case\"AvgPool3D\":return n=c(\"strides\",e,t,a),s=c(\"pad\",e,t,a),v=c(\"kernelSize\",e,t,a),[(0,r.avgPool3d)(c(\"x\",e,t,a),[v[1],v[2],v[3]],[n[1],n[2],n[3]],s)];case\"MaxPool3D\":return n=c(\"strides\",e,t,a),s=c(\"pad\",e,t,a),v=c(\"kernelSize\",e,t,a),[(0,r.maxPool3d)(c(\"x\",e,t,a),[v[1],v[2],v[3]],[n[1],n[2],n[3]],s)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},ge=function(e,t,a){switch(e.op){case\"Fill\":var n=c(\"shape\",e,t,a),s=c(\"dtype\",e,t,a),o=c(\"value\",e,t,a);return[(0,r.fill)(n,o,s)];case\"LinSpace\":var p=c(\"start\",e,t,a),i=c(\"stop\",e,t,a),u=c(\"num\",e,t,a);return[(0,r.linspace)(p,i,u)];case\"Multinomial\":var m=c(\"logits\",e,t,a),d=c(\"numSamples\",e,t,a),y=c(\"seed\",e,t,a);return[(0,r.multinomial)(m,d,y)];case\"OneHot\":var l=c(\"indices\",e,t,a),f=c(\"depth\",e,t,a),h=c(\"onValue\",e,t,a),N=c(\"offValue\",e,t,a);return[(0,r.oneHot)(l,f,h,N)];case\"Ones\":return[(0,r.ones)(c(\"shape\",e,t,a),c(\"dtype\",e,t,a))];case\"OnesLike\":return[(0,r.onesLike)(c(\"x\",e,t,a))];case\"RandomUniform\":return[(0,r.randomUniform)(c(\"shape\",e,t,a),c(\"minval\",e,t,a),c(\"maxval\",e,t,a),c(\"dtype\",e,t,a))];case\"Range\":p=c(\"start\",e,t,a);var g=c(\"stop\",e,t,a),b=c(\"step\",e,t,a);return[(0,r.range)(p,g,b,c(\"dtype\",e,t,a))];case\"TruncatedNormal\":n=c(\"shape\",e,t,a);var x=c(\"mean\",e,t,a),v=c(\"stdDev\",e,t,a);return y=c(\"seed\",e,t,a),[(0,r.truncatedNormal)(n,x,v,c(\"dtype\",e,t,a),y)];case\"Zeros\":return[(0,r.zeros)(c(\"shape\",e,t,a),c(\"dtype\",e,t,a))];case\"ZerosLike\":return[(0,r.zerosLike)(c(\"x\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},be=void 0,xe=function(e,t,a){return s(be,void 0,void 0,function(){var n,s,p,i,u,m,d,y;return o(this,function(o){switch(o.label){case 0:switch(e.op){case\"NonMaxSuppressionV5\":case\"NonMaxSuppressionV3\":case\"NonMaxSuppressionV2\":return[3,1];case\"Where\":return[3,5];case\"ListDiff\":return[3,7]}return[3,8];case 1:return n=c(\"boxes\",e,t,a),s=c(\"scores\",e,t,a),p=c(\"maxOutputSize\",e,t,a),i=c(\"iouThreshold\",e,t,a),u=c(\"scoreThreshold\",e,t,a),\"NonMaxSuppressionV5\"!==e.op?[3,3]:(m=c(\"softNmsSigma\",e,t,a),[4,r.image.nonMaxSuppressionWithScoreAsync(n,s,p,i,u,m)]);case 2:return[2,[(y=o.sent()).selectedIndices,y.selectedScores]];case 3:return[4,r.image.nonMaxSuppressionAsync(n,s,p,i,u)];case 4:return[2,[o.sent()]];case 5:return d=c(\"condition\",e,t,a).asType(\"bool\"),[4,(0,r.whereAsync)(d)];case 6:return y=[o.sent()],d.dispose(),[2,y];case 7:return[2,(0,r.setdiff1dAsync)(c(\"x\",e,t,a),c(\"y\",e,t,a))];case 8:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}})})},ve=function(e,t,a){switch(e.op){case\"TopKV2\":var n=c(\"x\",e,t,a),s=c(\"k\",e,t,a),o=c(\"sorted\",e,t,a),p=(0,r.topk)(n,s,o);return[p.values,p.indices];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},Te=function(e,t,a){switch(e.op){case\"Const\":return t[e.name];case\"PlaceholderWithDefault\":var n=c(\"default\",e,t,a);return[d(e.name,t,a)||n];case\"Placeholder\":return[d(e.name,t,a)];case\"Identity\":case\"StopGradient\":case\"FakeQuantWithMinMaxVars\":return[c(\"x\",e,t,a).clone()];case\"IdentityN\":return c(\"x\",e,t,a).map(function(e){return e.clone()});case\"Snapshot\":return[c(\"x\",e,t,a).clone()];case\"Shape\":return[(0,r.tensor1d)(c(\"x\",e,t,a).shape,\"int32\")];case\"ShapeN\":return c(\"x\",e,t,a).map(function(e){return(0,r.tensor1d)(e.shape)});case\"Size\":return[(0,r.scalar)(c(\"x\",e,t,a).size,\"int32\")];case\"Rank\":return[(0,r.scalar)(c(\"x\",e,t,a).rank,\"int32\")];case\"NoOp\":return[(0,r.scalar)(1)];case\"Print\":var s=c(\"x\",e,t,a),o=c(\"data\",e,t,a),p=c(\"message\",e,t,a),i=c(\"summarize\",e,t,a);console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\"),console.log(p);for(var u=0;u<o.length;u++)console.log(Array.prototype.slice.call(o[u].dataSync()).slice(0,i));return[s];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},Oe=function(e,t,a){switch(e.op){case\"ResizeBilinear\":var n=c(\"images\",e,t,a),s=c(\"size\",e,t,a),o=c(\"alignCorners\",e,t,a);return[r.image.resizeBilinear(n,[s[0],s[1]],o)];case\"ResizeNearestNeighbor\":return n=c(\"images\",e,t,a),s=c(\"size\",e,t,a),o=c(\"alignCorners\",e,t,a),[r.image.resizeNearestNeighbor(n,[s[0],s[1]],o)];case\"CropAndResize\":var p=c(\"image\",e,t,a),i=c(\"boxes\",e,t,a),u=c(\"boxInd\",e,t,a),m=c(\"cropSize\",e,t,a),d=c(\"method\",e,t,a),y=c(\"extrapolationValue\",e,t,a);return[r.image.cropAndResize(p,i,u,m,d,y)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},Se=function(e,t,a){switch(e.op){case\"Equal\":return[(0,r.equal)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"NotEqual\":return[(0,r.notEqual)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"Greater\":return[(0,r.greater)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"GreaterEqual\":return[(0,r.greaterEqual)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"Less\":return[(0,r.less)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"LessEqual\":return[(0,r.lessEqual)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"LogicalAnd\":return[(0,r.logicalAnd)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"LogicalNot\":return[(0,r.logicalNot)(c(\"a\",e,t,a))];case\"LogicalOr\":return[(0,r.logicalOr)(c(\"a\",e,t,a),c(\"b\",e,t,a))];case\"Select\":return[(0,r.where)(c(\"condition\",e,t,a),c(\"a\",e,t,a),c(\"b\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},_e=function(e,t,a){switch(e.op){case\"BatchMatMul\":case\"BatchMatMulV2\":case\"MatMul\":return[(0,r.matMul)(c(\"a\",e,t,a),c(\"b\",e,t,a),c(\"transposeA\",e,t,a),c(\"transposeB\",e,t,a))];case\"Transpose\":return[(0,r.transpose)(c(\"x\",e,t,a),c(\"perm\",e,t,a))];case\"_FusedMatMul\":var n=c(\"fusedOps\",e,t,a),s=n[0],o=n[1],p=\"biasadd\"===s,i=\"prelu\"===o,u=c(\"numArgs\",e,t,a);if(p){if(i&&2!==u)throw new Error(\"Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!i&&1!==u)throw new Error(\"Fused MatMul with BiasAdd must have one extra argument: bias.\")}var m=c(\"args\",e,t,a),d=m[0],y=m[1];return[r.fused.matMul({a:c(\"a\",e,t,a),b:c(\"b\",e,t,a),transposeA:c(\"transposeA\",e,t,a),transposeB:c(\"transposeB\",e,t,a),bias:d,activation:o,preluActivationWeights:y})];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},we=function(e,t,a){switch(e.op){case\"FusedBatchNorm\":case\"FusedBatchNormV2\":case\"FusedBatchNormV3\":return[(0,r.batchNorm)(c(\"x\",e,t,a),c(\"mean\",e,t,a),c(\"variance\",e,t,a),c(\"offset\",e,t,a),c(\"scale\",e,t,a),c(\"epsilon\",e,t,a))];case\"LRN\":return[(0,r.localResponseNormalization)(c(\"x\",e,t,a),c(\"radius\",e,t,a),c(\"bias\",e,t,a),c(\"alpha\",e,t,a),c(\"beta\",e,t,a))];case\"Softmax\":return[(0,r.softmax)(c(\"x\",e,t,a))];case\"LogSoftmax\":return[(0,r.logSoftmax)(c(\"x\",e,t,a))];case\"SparseToDense\":return[(0,r.sparseToDense)(c(\"sparseIndices\",e,t,a),c(\"outputShape\",e,t,a),c(\"sparseValues\",e,t,a),c(\"defaultValue\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},Ae=function(e,t,a){switch(e.op){case\"Max\":var n=c(\"axis\",e,t,a),s=c(\"keepDims\",e,t,a);return[(0,r.max)(c(\"x\",e,t,a),n,s)];case\"Mean\":return n=c(\"axis\",e,t,a),s=c(\"keepDims\",e,t,a),[(0,r.mean)(c(\"x\",e,t,a),n,s)];case\"Min\":return n=c(\"axis\",e,t,a),s=c(\"keepDims\",e,t,a),[(0,r.min)(c(\"x\",e,t,a),n,s)];case\"Sum\":return n=c(\"axis\",e,t,a),s=c(\"keepDims\",e,t,a),[(0,r.sum)(c(\"x\",e,t,a),n,s)];case\"All\":return n=c(\"axis\",e,t,a),s=c(\"keepDims\",e,t,a),[(0,r.all)(c(\"x\",e,t,a),n,s)];case\"Any\":return n=c(\"axis\",e,t,a),s=c(\"keepDims\",e,t,a),[(0,r.any)(c(\"x\",e,t,a),n,s)];case\"ArgMax\":return n=c(\"axis\",e,t,a),[(0,r.argMax)(c(\"x\",e,t,a),n)];case\"ArgMin\":return n=c(\"axis\",e,t,a),[(0,r.argMin)(c(\"x\",e,t,a),n)];case\"Prod\":return n=c(\"axis\",e,t,a),s=c(\"keepDims\",e,t,a),[(0,r.prod)(c(\"x\",e,t,a),n,s)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},De=function(e,t,a){switch(e.op){case\"ConcatV2\":case\"Concat\":var n=c(\"n\",e,t,a),s=c(\"axis\",e,t,a),o=c(\"tensors\",e,t,a);return o=o.slice(0,n),[(0,r.concat)(o,s)];case\"GatherV2\":case\"Gather\":s=c(\"axis\",e,t,a);var p=c(\"x\",e,t,a),i=c(\"indices\",e,t,a);return[(0,r.gather)(p,i.asType(\"int32\"),s)];case\"ReverseV2\":case\"Reverse\":return s=c(\"axis\",e,t,a),p=c(\"x\",e,t,a),[(0,r.reverse)(p,s)];case\"Slice\":var u=c(\"begin\",e,t,a),m=c(\"size\",e,t,a);return[(0,r.slice)(c(\"x\",e,t,a),u,m)];case\"StridedSlice\":u=c(\"begin\",e,t,a);var d=c(\"end\",e,t,a),y=c(\"strides\",e,t,a),l=c(\"beginMask\",e,t,a),f=c(\"endMask\",e,t,a),h=c(\"ellipsisMask\",e,t,a),N=c(\"newAxisMask\",e,t,a),g=c(\"shrinkAxisMask\",e,t,a),b=c(\"x\",e,t,a);if(1===u.length&&b.shape.length>1)for(var x=1;x<b.shape.length;x++)u.push(0),d.push(b.shape[x]),y.push(y[0]);return[(0,r.stridedSlice)(b,u,d,y,l,f,h,N,g)];case\"Pack\":return(0,r.tidy)(function(){var n=c(\"axis\",e,t,a),s=c(\"tensors\",e,t,a),o=s[0].shape,p=s[0].squeeze().shape,i=s.map(function(e){var t=r.util.arraysEqual(e.shape,o);if(!t&&!r.util.arraysEqual(e.squeeze().shape,p))throw new Error(\"the input tensors shape does not match\");return t?e:e.reshape(o)});return[(0,r.stack)(i,n)]});case\"Unpack\":return(0,r.tidy)(function(){var n=c(\"axis\",e,t,a),s=c(\"tensor\",e,t,a);return(0,r.unstack)(s,n)});case\"Tile\":var v=c(\"reps\",e,t,a);return[(0,r.tile)(c(\"x\",e,t,a),v)];case\"Split\":case\"SplitV\":s=c(\"axis\",e,t,a);var T=c(\"numOrSizeSplits\",e,t,a);return(0,r.split)(c(\"x\",e,t,a),T,s);case\"ScatterNd\":i=c(\"indices\",e,t,a);var O=c(\"values\",e,t,a),S=c(\"shape\",e,t,a);return[(0,r.scatterND)(i,O,S)];case\"GatherNd\":var _=c(\"x\",e,t,a);return i=c(\"indices\",e,t,a),[(0,r.gatherND)(_,i)];case\"SparseToDense\":i=c(\"sparseIndices\",e,t,a),S=c(\"outputShape\",e,t,a);var w=c(\"sparseValues\",e,t,a),A=c(\"defaultValue\",e,t,a);return[(0,r.sparseToDense)(i,w,S,w.dtype===A.dtype?A:A.asType(w.dtype))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},Ee=function(e,t,a){switch(e.op){case\"FFT\":return[(0,r.fft)(c(\"x\",e,t,a))];case\"IFFT\":return[(0,r.ifft)(c(\"x\",e,t,a))];case\"RFFT\":return[(0,r.rfft)(c(\"x\",e,t,a))];case\"IRFFT\":return[(0,r.irfft)(c(\"x\",e,t,a))];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}},Ve=function(e,t,a){switch(e.op){case\"Cast\":return[(0,r.cast)(c(\"x\",e,t,a),c(\"dtype\",e,t,a))];case\"ExpandDims\":var n=c(\"axis\",e,t,a);return[(0,r.expandDims)(c(\"x\",e,t,a),n)];case\"Squeeze\":return n=c(\"axis\",e,t,a),[(0,r.squeeze)(c(\"x\",e,t,a),n)];case\"Reshape\":return[(0,r.reshape)(c(\"x\",e,t,a),c(\"shape\",e,t,a))];case\"PadV2\":case\"Pad\":return[(0,r.pad)(c(\"x\",e,t,a),N(c(\"padding\",e,t,a),2),c(\"constantValue\",e,t,a))];case\"SpaceToBatchND\":var s=c(\"blockShape\",e,t,a),o=N(c(\"paddings\",e,t,a),2);return[(0,r.spaceToBatchND)(c(\"x\",e,t,a),s,o)];case\"BatchToSpaceND\":s=c(\"blockShape\",e,t,a);var p=N(c(\"crops\",e,t,a),2);return[(0,r.batchToSpaceND)(c(\"x\",e,t,a),s,p)];case\"DepthToSpace\":var i=c(\"blockSize\",e,t,a),u=c(\"dataFormat\",e,t,a).toUpperCase();return[(0,r.depthToSpace)(c(\"x\",e,t,a),i,u)];default:throw TypeError(\"Node type \"+e.op+\" is not implemented\")}};function Ie(e,t,a){var n=function(e,t,a){switch(e.category){case\"arithmetic\":return(0,r.tidy)(function(){return de(e,t,a)});case\"basic_math\":return(0,r.tidy)(function(){return ye(e,t,a)});case\"control\":return he(e,t,a);case\"convolution\":return(0,r.tidy)(function(){return Ne(e,t,a)});case\"creation\":return(0,r.tidy)(function(){return ge(e,t,a)});case\"dynamic\":return xe(e,t,a);case\"evaluation\":return(0,r.tidy)(function(){return ve(e,t,a)});case\"image\":return(0,r.tidy)(function(){return Oe(e,t,a)});case\"graph\":return(0,r.tidy)(function(){return Te(e,t,a)});case\"logical\":return(0,r.tidy)(function(){return Se(e,t,a)});case\"matrices\":return(0,r.tidy)(function(){return _e(e,t,a)});case\"normalization\":return(0,r.tidy)(function(){return we(e,t,a)});case\"reduction\":return(0,r.tidy)(function(){return Ae(e,t,a)});case\"slice_join\":return(0,r.tidy)(function(){return De(e,t,a)});case\"spectral\":return(0,r.tidy)(function(){return Ee(e,t,a)});case\"transformation\":return(0,r.tidy)(function(){return Ve(e,t,a)});case\"custom\":var n=u(e.op);if(n&&n.customExecutor)return n.customExecutor(new ce(e,t,a));throw TypeError(\"Custom op \"+e.op+\" is not registered.\");default:throw TypeError(\"Unknown op '\"+e.op+\"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()\")}}(e,t,a);return n instanceof Promise?n.then(function(e){return[].concat(e)}):[].concat(n)}var Me=function(){function e(e,t){this.weightMap=e,this.tensorArrayMap=t,this.rootContext={id:0,frameName:\"\",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return e.prototype.newFrame=function(e,t){return{id:e,frameName:t,iterationId:0}},Object.defineProperty(e.prototype,\"currentContext\",{get:function(){return this.contexts},set:function(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentContextId\",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentContextIds\",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),e.prototype.generateCurrentContextIds=function(){for(var e=[],t=0;t<this.contexts.length-1;t++){var a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a))}e.push(\"\"),this._currentContextIds=e},e.prototype.contextIdforContexts=function(e){return e?e.map(function(e){return 0===e.id&&0===e.iterationId?\"\":e.frameName+\"-\"+e.iterationId}).join(\"/\"):\"\"},e.prototype.enterFrame=function(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},e.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error(\"Cannot exit frame, the context is empty\");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},e.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error(\"Cannot increase frame iteration, the context is empty\");this.contexts=this.contexts.slice(),this.lastId++;var e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},e.prototype.getWeight=function(e){return this.weightMap[e]},e.prototype.addTensorArray=function(e){this.tensorArrayMap[e.id]=e},e.prototype.getTensorArray=function(e){return this.tensorArrayMap[e]},e}();function ke(e,t,a){for(var r=new Set,n=[],s=null,o=null,p=new Set,i=Object.keys(e).map(function(e){return h(e)[0]}),u=t.slice();u.length>0;){var m=u.pop();(je(m)||Re(m))&&null==s&&(o=(s=m).children.map(function(e){return e.name}).filter(function(e){return r.has(e)})),r.add(m.name),null==a[m.name]&&-1===i.indexOf(m.name)&&(0!==m.inputs.length?m.inputs.forEach(function(e){p.has(e.name)||(p.add(e.name),u.push(e))}):n.push(m.name))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:n,dynamicNode:s,syncInputs:o}}function Ce(e,t,a){var r=a.usedNodes,n=a.inputs,s=[];Object.keys(n).map(function(e){return h(e)[0]}).map(function(t){return e.nodes[t]}).forEach(function(e){r.has(e.name)&&s.push(e)}),e.weights.forEach(function(e){r.has(e.name)&&s.push(e)});for(var o=new Set,p=[];s.length>0;){var i=s.pop();o.add(i.name),t[i.name]||p.push(i),i.children.forEach(function(e){!o.has(e.name)&&r.has(e.name)&&e.inputs.every(function(e){return o.has(e.name)})&&s.push(e)})}return p}var ze=[\"Switch\",\"Merge\",\"Enter\",\"Exit\",\"NextIteration\"],Fe=[\"NonMaxSuppressionV2\",\"NonMaxSuppressionV3\",\"NonMaxSuppressionV5\",\"Where\"];function je(e){return ze.indexOf(e.op)>=0}function Re(e){return Fe.indexOf(e.op)>=0}var Pe=function(){function e(e){this.graph=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=\",\",this._outputs=e.outputs,this._inputs=e.inputs,this._signature=e.signature}return Object.defineProperty(e.prototype,\"weightMap\",{get:function(){return this._weightMap},set:function(e){var t=Object.keys(e).map(function(t){return e[t].map(function(e){return e.id})});this.weightIds=[].concat.apply([],t),this._weightMap=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputs\",{get:function(){return this._inputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputs\",{get:function(){return this._outputs.map(function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputNodes\",{get:function(){return this._inputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputNodes\",{get:function(){return this._outputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),e.prototype.getCompilationKey=function(e,t){var a=e.map(function(e){return e.name}).sort(),r=t.map(function(e){return e.name}).sort();return a.join(this.SEPERATOR)+\"--\"+r.join(this.SEPERATOR)},e.prototype.compile=function(e,t){var a=ke(e,t,this.weightMap),r=a.missingInputs,n=a.dynamicNode,s=a.syncInputs;if(null!=n)throw new Error(\"This execution contains the node '\"+n.name+\"', which has the dynamic op '\"+n.op+\"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [\"+s+\"]\");if(r.length>0){var o=t.map(function(e){return e.name}),p=Object.keys(e);throw new Error(\"Cannot compute the outputs [\"+o+\"] from the provided inputs [\"+p+\"]. Missing the following inputs: [\"+r+\"]\")}return Ce(this.graph,this.weightMap,a)},e.prototype.execute=function(e,t){var a=this;e=this.mapInputs(e);var s=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);var o=s.map(function(e){return a.graph.nodes[h(e)[0]]}),p=t.map(function(e){return a.graph.nodes[h(e)[0]]}),i=this.getCompilationKey(o,p),u=this.compiledMap.get(i);null==u&&(u=this.compile(e,p),this.compiledMap.set(i,u));var m={};return(0,r.tidy)(function(){var r=new Me(a._weightMap,m),s=n({},a.weightMap);Object.keys(e).forEach(function(t){var a=h(t),r=a[0],n=[];n[a[1]]=e[t],s[r]=n});for(var o=a.getFrozenTensorIds(s),p={},i=0;i<u.length;i++){var c=u[i];if(!s[c.name]){var y=Ie(c,s,r);if(y instanceof Promise)throw new Error(\"The execution of the op '\"+c.op+\"' returned a promise. Please use model.executeAsync() instead.\");s[c.name]=y,a.checkTensorForDisposal(c.name,c,s,r,o,t,p)}}return t.map(function(e){return d(e,s,r)})})},e.prototype.getFrozenTensorIds=function(e){var t=[].concat.apply([],Object.keys(e).map(function(t){return e[t]}).map(function(e){return e.map(function(e){return e.id})}));return new Set(t)},e.prototype.checkTensorForDisposal=function(e,t,a,r,n,s,o){\"control\"!==t.category&&-1===s.indexOf(e)&&(a[e].forEach(function(e){null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(function(e){if(\"control\"!==e.category){var t=y(e.name,a,r);null!=t&&t.forEach(function(e){if(e&&!n.has(e.id)){var t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}})}}))},e.prototype.executeAsync=function(e,t){return s(this,void 0,void 0,function(){var a,r,n,s,p,i,u=this;return o(this,function(o){switch(o.label){case 0:return e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t),a={},r=new Me(this._weightMap,a),[4,this.executeWithControlFlow(e,r,t)];case 1:return n=o.sent(),s=t.map(function(e){return d(e,n,r)}),p=new Set(s.map(function(e){return e.id})),i=new Set(Object.keys(e).map(function(t){return e[t].id})),Object.keys(n).forEach(function(e){n[e].forEach(function(e){!e||e.isDisposed||p.has(e.id)||i.has(e.id)||-1!==u.weightIds.indexOf(e.id)||e.dispose()})}),[2,s]}})})},e.prototype.executeWithControlFlow=function(e,t,a){return s(this,void 0,void 0,function(){var r,s,p,i,u,m,c,y,l,f,N,g,b,x,v,T,O=this;return o(this,function(o){switch(o.label){case 0:r=Object.keys(e),s=r.map(function(e){return O.graph.nodes[h(e)[0]]}),p=a.map(function(e){return O.graph.nodes[h(e)[0]]}),i=ke(e,p,this.weightMap),u=i.usedNodes,m=i.missingInputs,c=i.dynamicNode,y=i.syncInputs,l=s.concat(this.graph.weights).map(function(e){return{node:e,contexts:t.currentContext}}),f=n({},this.weightMap),Object.keys(e).forEach(function(t){var a=h(t),r=a[0],n=[];n[a[1]]=e[t],f[r]=n}),N={},g=this.getFrozenTensorIds(f),b={},o.label=1;case 1:return l.length>0?(x=this.processStack(s,l,t,f,b,g,a,N,u),[4,Promise.all(x)]):[3,3];case 2:return o.sent(),[3,1];case 3:if(null==c&&console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\"),(v=p.filter(function(e){return!je(e)&&!d(e.name,f,t)}).map(function(e){return e.name})).length>0)throw T=\"\",null!=c&&(T=\"Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [\"+y+\"]\"),new Error(\"Cannot compute the outputs [\"+v+\"] from the provided inputs [\"+r+\"]. Consider providing the following inputs: [\"+m+\"]. \"+T);return[2,f]}})})},e.prototype.processStack=function(e,t,a,r,n,s,o,p,i){for(var u=this,m=[],d=function(){var d=t.pop();a.currentContext=d.contexts;var f=\"\";if(\"Enter\"===d.node.op&&c(\"isConstant\",d.node,r,a)&&(f=l(d.node.name,a)[0]),-1===e.indexOf(d.node)){var h=Ie(d.node,r,a);f||(f=l(d.node.name,a)[0]);var N=a.currentContext;h instanceof Promise?m.push(h.then(function(e){return r[f]=e,a.currentContext=N,u.checkTensorForDisposal(f,d.node,r,a,s,o,p),u.processChildNodes(d.node,t,a,r,n,i),e})):(r[f]=h,y.checkTensorForDisposal(f,d.node,r,a,s,o,p),y.processChildNodes(d.node,t,a,r,n,i))}else y.processChildNodes(d.node,t,a,r,n,i)},y=this;t.length>0;)d();return m},e.prototype.processChildNodes=function(e,t,a,r,n,s){e.children.forEach(function(e){var o=l(e.name,a)[0];!n[o]&&s.has(e.name)&&(\"Merge\"===e.op?e.inputNames.some(function(e){return!!d(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})):e.inputNames.every(function(e){return!!d(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})))})},e.prototype.dispose=function(){var e=this;Object.keys(this.weightMap).forEach(function(t){return e.weightMap[t].forEach(function(e){return e.dispose()})})},e.prototype.checkInputShapeAndType=function(e){var t=this;Object.keys(e).forEach(function(a){var n=e[a],s=h(a)[0],o=t.graph.nodes[s];if(o.attrParams.shape&&o.attrParams.shape.value){var p=o.attrParams.shape.value,i=p.length===n.shape.length&&n.shape.every(function(e,t){return-1===p[t]||p[t]===e});r.util.assert(i,function(){return\"The shape of dict['\"+o.name+\"'] provided in model.execute(dict) must be [\"+p+\"], but was [\"+n.shape+\"]\"})}o.attrParams.dtype&&o.attrParams.dtype.value&&r.util.assert(n.dtype===o.attrParams.dtype.value,function(){return\"The dtype of dict['\"+o.name+\"'] provided in model.execute(dict) must be \"+o.attrParams.dtype.value+\", but was \"+n.dtype})})},e.prototype.mapInputs=function(e){var t={};for(var a in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[a]?t[this._signature.inputs[a].name]=e[a]:t[a]=e[a];return t},e.prototype.checkInputs=function(e){var t=this,a=Object.keys(e).filter(function(e){var a=h(e)[0];return null==t.graph.nodes[a]});if(a.length>0)throw new Error(\"The dict provided in model.execute(dict) has keys: [\"+a+\"] that are not part of graph\")},e.prototype.mapOutputs=function(e){var t=this;return e.map(function(e){return null!=t._signature&&null!=t._signature.outputs&&null!=t._signature.outputs[e]?t._signature.outputs[e].name:e},{})},e.prototype.checkOutputs=function(e){var t=this;e.forEach(function(e){var a=h(e)[0];if(!t.graph.nodes[a])throw new Error(\"The output '\"+e+\"' is not found in the graph\")})},e}(),Le=\"?tfjs-format=file\",Be=\"model.json\",qe=function(){function e(e,t){void 0===t&&(t={}),this.modelUrl=e,this.loadOptions=t,this.version=\"n/a\",null==t&&(this.loadOptions={})}return Object.defineProperty(e.prototype,\"modelVersion\",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputNodes\",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputNodes\",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"inputs\",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"outputs\",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"weights\",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),e.prototype.findIOHandler=function(){var e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=r.io.browserHTTPRequest(e,this.loadOptions);else{var t=r.io.getLoadHandlers(e,this.loadOptions.onProgress);if(0===t.length)t.push(r.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(\"Found more than one (\"+t.length+\") load handlers for URL '\"+[e]+\"'\");this.handler=t[0]}},e.prototype.load=function(){return s(this,void 0,void 0,function(){var e,t,a,n;return o(this,function(s){switch(s.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");return e=this,[4,this.handler.load()];case 1:return e.artifacts=s.sent(),t=this.artifacts.modelTopology,a={},null!=this.artifacts.userDefinedMetadata&&(a=this.artifacts.userDefinedMetadata.signature),this.version=t.versions.producer+\".\"+t.versions.minConsumer,n=r.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs),this.executor=new Pe(Z.Instance.transformGraph(t,a)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),[2,!0]}})})},e.prototype.save=function(e,t){return s(this,void 0,void 0,function(){var t;return o(this,function(a){if(\"string\"==typeof e){if(0===(t=r.io.getSaveHandlers(e)).length)throw new Error(\"Cannot find any save handlers for URL '\"+e+\"'\");if(t.length>1)throw new Error(\"Found more than one (\"+t.length+\") save handlers for URL '\"+e+\"'\");e=t[0]}if(null==e.save)throw new Error(\"GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");return[2,e.save(this.artifacts)]})})},e.prototype.predict=function(e,t){return this.execute(e,this.outputNodes)},e.prototype.normalizeInputs=function(e){if(!(e instanceof r.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(\"Input tensor count mismatch,the graph model has \"+this.inputNodes.length+\" placeholders, while there are \"+e.length+\" input tensors.\");return this.inputNodes.reduce(function(t,a,r){return t[a]=e[r],t},{})},e.prototype.normalizeOutputs=function(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]},e.prototype.execute=function(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);var a=this.executor.execute(e,t);return a.length>1?a:a[0]},e.prototype.executeAsync=function(e,t){return s(this,void 0,void 0,function(){var a;return o(this,function(r){switch(r.label){case 0:return e=this.normalizeInputs(e),t=this.normalizeOutputs(t),[4,this.executor.executeAsync(e,t)];case 1:return[2,(a=r.sent()).length>1?a:a[0]]}})})},e.prototype.convertTensorMapToTensorsMap=function(e){return Object.keys(e).reduce(function(t,a){return t[a]=[e[a]],t},{})},e.prototype.dispose=function(){this.executor.dispose()},e}();function Ue(e,t){return void 0===t&&(t={}),s(this,void 0,void 0,function(){var a;return o(this,function(r){switch(r.label){case 0:if(null==e)throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");return null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith(\"/\")||(e+=\"/\"),e=\"\"+e+Be+Le),[4,(a=new qe(e,t)).load()];case 1:return r.sent(),[2,a]}})})}exports.GraphModel=qe;var Ge=\"1.7.1\";exports.version_converter=Ge;"},"sourceMaps":null,"error":null,"hash":"f451f1647d7c3e4db78923aaed6d51a1","cacheData":{"env":{}}}