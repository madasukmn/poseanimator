{"id":"utils/demoUtils.js","dependencies":[{"name":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/package.json","includedInParent":true,"mtime":1636789466000},{"name":"@tensorflow-models/posenet","loc":{"line":18,"column":25},"parent":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/utils/demoUtils.js","resolved":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/node_modules/@tensorflow-models/posenet/dist/posenet.esm.js"},{"name":"@tensorflow/tfjs","loc":{"line":19,"column":20},"parent":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/utils/demoUtils.js","resolved":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/node_modules/@tensorflow/tfjs/dist/tf.esm.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMobile = isMobile;\nexports.toggleLoadingUI = toggleLoadingUI;\nexports.drawPoint = drawPoint;\nexports.drawSegment = drawSegment;\nexports.drawSkeleton = drawSkeleton;\nexports.drawKeypoints = drawKeypoints;\nexports.renderImageToCanvas = renderImageToCanvas;\nexports.setStatusText = setStatusText;\n\nvar posenet = _interopRequireWildcard(require(\"@tensorflow-models/posenet\"));\n\nvar tf = _interopRequireWildcard(require(\"@tensorflow/tfjs\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar color = 'aqua';\nvar boundingBoxColor = 'red';\nvar lineWidth = 2;\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nfunction isMobile() {\n  return isAndroid() || isiOS();\n}\n\nfunction setDatGuiPropertyCss(propertyText, liCssString) {\n  var spanCssString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var spans = document.getElementsByClassName('property-name');\n\n  for (var i = 0; i < spans.length; i++) {\n    var text = spans[i].textContent || spans[i].innerText;\n\n    if (text == propertyText) {\n      spans[i].parentNode.parentNode.style = liCssString;\n\n      if (spanCssString !== '') {\n        spans[i].style = spanCssString;\n      }\n    }\n  }\n}\n/**\n * Toggles between the loading UI and the main canvas UI.\n */\n\n\nfunction toggleLoadingUI(showLoadingUI) {\n  var loadingDivId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'loading';\n  var mainDivId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'main';\n\n  if (showLoadingUI) {\n    document.getElementById(loadingDivId).style.display = 'block';\n    document.getElementById(mainDivId).style.display = 'none';\n  } else {\n    document.getElementById(loadingDivId).style.display = 'none';\n    document.getElementById(mainDivId).style.display = 'block';\n  }\n}\n\nfunction toTuple(_ref) {\n  var y = _ref.y,\n      x = _ref.x;\n  return [y, x];\n}\n\nfunction drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n/**\n * Draws a line on a canvas, i.e. a joint\n */\n\n\nfunction drawSegment(_ref2, _ref3, color, scale, ctx) {\n  var _ref4 = _slicedToArray(_ref2, 2),\n      ay = _ref4[0],\n      ax = _ref4[1];\n\n  var _ref5 = _slicedToArray(_ref3, 2),\n      by = _ref5[0],\n      bx = _ref5[1];\n\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n/**\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\n */\n\n\nfunction drawSkeleton(keypoints, minConfidence, ctx) {\n  var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var adjacentKeyPoints = posenet.getAdjacentKeyPoints(keypoints, minConfidence);\n  adjacentKeyPoints.forEach(function (keypoints) {\n    drawSegment(toTuple(keypoints[0].position), toTuple(keypoints[1].position), color, scale, ctx);\n  });\n}\n/**\n * Draw pose keypoints onto a canvas\n */\n\n\nfunction drawKeypoints(keypoints, minConfidence, ctx) {\n  var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  for (var i = 0; i < keypoints.length; i++) {\n    var keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    var _keypoint$position = keypoint.position,\n        y = _keypoint$position.y,\n        x = _keypoint$position.x;\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}\n/**\n * Draw an image on a canvas\n */\n\n\nfunction renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  var ctx = canvas.getContext('2d');\n  ctx.drawImage(image, 0, 0);\n}\n\nfunction setStatusText(text) {\n  var resultElement = document.getElementById('status');\n  resultElement.innerText = text;\n}"},"sourceMaps":null,"error":null,"hash":"42e8663a76cf29cb37982bcc7bec8944","cacheData":{"env":{}}}