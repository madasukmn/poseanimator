{"id":"utils/svgUtils.js","dependencies":[{"name":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/package.json","includedInParent":true,"mtime":1636789466000},{"name":"paper","loc":{"line":18,"column":23},"parent":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/utils/svgUtils.js","resolved":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/node_modules/paper/dist/paper-full.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SVGUtils = void 0;\n\nvar paper = _interopRequireWildcard(require(\"paper\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SVGUtils = /*#__PURE__*/function () {\n  function SVGUtils() {\n    _classCallCheck(this, SVGUtils);\n  }\n\n  _createClass(SVGUtils, null, [{\n    key: \"importSVG\",\n    value: function importSVG(file) {\n      var svgScope = new paper.default.PaperScope();\n      var canvas = svgScope.createCanvas(0, 0);\n      svgScope.setup(canvas);\n      return new Promise(function (resolve, reject) {\n        svgScope.project.importSVG(file, function () {\n          console.log('** SVG imported **');\n          resolve(svgScope);\n        }, function (e) {\n          console.log('** SVG improt error: ', e);\n          reject(svgScope);\n        });\n      });\n    }\n  }, {\n    key: \"drawEllipse\",\n    value: function drawEllipse(p, va, vb, ctrlDA, ctrlDB, scope, options) {\n      var va1 = va.multiply(-1);\n      var vb1 = vb.multiply(-1);\n      var p0 = p.add(va);\n      var p1 = p.add(vb);\n      var p2 = p.add(va1);\n      var p3 = p.add(vb1);\n      var path = new scope.Path(options);\n      path.addSegment(p0, vb1.normalize().multiply(ctrlDB), vb.normalize().multiply(ctrlDB));\n      path.addSegment(p1, va.normalize().multiply(ctrlDA), va1.normalize().multiply(ctrlDA));\n      path.addSegment(p2, vb.normalize().multiply(ctrlDB), vb1.normalize().multiply(ctrlDB));\n      path.addSegment(p3, va1.normalize().multiply(ctrlDA), va.normalize().multiply(ctrlDA));\n      path.closePath();\n      return path;\n    }\n  }, {\n    key: \"genPathWithSpline\",\n    value: function genPathWithSpline(path, spline, height, options, scope) {\n      var pathLen = path.length;\n\n      if (pathLen == 0) {\n        return path.clone();\n      }\n\n      var to = [];\n      var back = [];\n      ;\n      var segCount = Math.max(pathLen / 3, 1.0);\n\n      for (var i = 0; i < segCount; i++) {\n        var perc = i / (segCount - 1);\n        var p = path.getPointAt(perc * pathLen);\n        var n = path.getNormalAt(perc * pathLen);\n        var easeHeight = spline.get(perc);\n        if (!p || !n) continue;\n        var pp0 = p.add(n.multiply(height * easeHeight));\n        var pp1 = p.subtract(n.multiply(height * easeHeight));\n        to.push(pp0);\n        back.unshift(pp1);\n      }\n\n      var outPath = new scope.Path(options);\n      outPath.addSegments(to.concat(back));\n      outPath.simplify();\n      return outPath;\n    }\n  }, {\n    key: \"isPath\",\n    value: function isPath(item) {\n      return item.constructor === item.project._scope.Path;\n    }\n  }, {\n    key: \"isShape\",\n    value: function isShape(item) {\n      return item.constructor === item.project._scope.Shape;\n    }\n  }, {\n    key: \"isGroup\",\n    value: function isGroup(item) {\n      return item.constructor === item.project._scope.Group;\n    }\n  }, {\n    key: \"findFirstItemWithPrefix\",\n    value: function findFirstItemWithPrefix(root, prefix) {\n      var items = root.getItems({\n        recursive: true\n      });\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].name && items[i].name.startsWith(prefix)) {\n          return items[i];\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return SVGUtils;\n}();\n\nexports.SVGUtils = SVGUtils;"},"sourceMaps":null,"error":null,"hash":"ffbdabe3e36832f84c45e328f0b074e5","cacheData":{"env":{}}}