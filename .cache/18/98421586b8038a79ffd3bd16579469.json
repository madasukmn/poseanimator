{"id":"illustrationGen/skeleton.js","dependencies":[{"name":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/package.json","includedInParent":true,"mtime":1636789466000},{"name":"paper","loc":{"line":18,"column":23},"parent":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/illustrationGen/skeleton.js","resolved":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/node_modules/paper/dist/paper-full.js"},{"name":"../utils/svgUtils","loc":{"line":19,"column":25},"parent":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/illustrationGen/skeleton.js","resolved":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/utils/svgUtils.js"},{"name":"../utils/mathUtils","loc":{"line":20,"column":26},"parent":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/illustrationGen/skeleton.js","resolved":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/utils/mathUtils.js"},{"name":"../utils/colorUtils","loc":{"line":21,"column":27},"parent":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/illustrationGen/skeleton.js","resolved":"/Users/kmadasu/kishore/trainings/javascript-gt/gautam/poseanimator/utils/colorUtils.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Skeleton = exports.Bone = exports.allPartNames = exports.facePartName2Index = void 0;\n\nvar paper = _interopRequireWildcard(require(\"paper\"));\n\nvar _svgUtils = require(\"../utils/svgUtils\");\n\nvar _mathUtils = require(\"../utils/mathUtils\");\n\nvar _colorUtils = require(\"../utils/colorUtils\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MIN_POSE_SCORE = 0.1;\nvar MIN_FACE_SCORE = 0.8;\nvar posePartNames = ['leftAnkle', 'leftKnee', 'leftHip', 'leftWrist', 'leftElbow', 'leftShoulder', 'rightAnkle', 'rightKnee', 'rightHip', 'rightWrist', 'rightElbow', 'rightShoulder', 'leftEar', 'rightEar']; // Mapping between face part names and their vertex indices in TF face mesh.\n\nvar facePartName2Index = {\n  'topMid': 10,\n  'rightTop0': 67,\n  'rightTop1': 54,\n  'leftTop0': 297,\n  'leftTop1': 284,\n  'rightJaw0': 21,\n  'rightJaw1': 162,\n  'rightJaw2': 127,\n  'rightJaw3': 234,\n  'rightJaw4': 132,\n  'rightJaw5': 172,\n  'rightJaw6': 150,\n  'rightJaw7': 176,\n  'jawMid': 152,\n  // 0 - 8\n  'leftJaw7': 400,\n  'leftJaw6': 379,\n  'leftJaw5': 397,\n  'leftJaw4': 361,\n  'leftJaw3': 454,\n  'leftJaw2': 356,\n  'leftJaw1': 389,\n  'leftJaw0': 251,\n  // 9 - 16\n  'rightBrow0': 46,\n  'rightBrow1': 53,\n  'rightBrow2': 52,\n  'rightBrow3': 65,\n  'rightBrow4': 55,\n  // 17 - 21\n  'leftBrow4': 285,\n  'leftBrow3': 295,\n  'leftBrow2': 282,\n  'leftBrow1': 283,\n  'leftBrow0': 276,\n  // 22 - 26\n  'nose0': 6,\n  'nose1': 197,\n  'nose2': 195,\n  'nose3': 5,\n  // 27 - 30\n  'rightNose0': 48,\n  'rightNose1': 220,\n  'nose4': 4,\n  'leftNose1': 440,\n  'leftNose0': 278,\n  // 31 - 35\n  'rightEye0': 33,\n  'rightEye1': 160,\n  'rightEye2': 158,\n  'rightEye3': 133,\n  'rightEye4': 153,\n  'rightEye5': 144,\n  // 36 - 41\n  'leftEye3': 362,\n  'leftEye2': 385,\n  'leftEye1': 387,\n  'leftEye0': 263,\n  'leftEye5': 373,\n  'leftEye4': 380,\n  // 42 - 47\n  'rightMouthCorner': 61,\n  'rightUpperLipTop0': 40,\n  'rightUpperLipTop1': 37,\n  'upperLipTopMid': 0,\n  'leftUpperLipTop1': 267,\n  'leftUpperLipTop0': 270,\n  'leftMouthCorner': 291,\n  // 48 - 54\n  'leftLowerLipBottom0': 321,\n  'leftLowerLipBottom1': 314,\n  'lowerLipBottomMid': 17,\n  'rightLowerLipBottom1': 84,\n  'rightLowerLipBottom0': 91,\n  // 55 - 59\n  'rightMiddleLip': 78,\n  'rightUpperLipBottom1': 81,\n  'upperLipBottomMid': 13,\n  'leftUpperLipBottom1': 311,\n  'leftMiddleLip': 308,\n  // 60 - 64\n  'leftLowerLipTop0': 402,\n  'lowerLipTopMid': 14,\n  'rightLowerLipTop0': 178 // 65 - 67\n\n};\nexports.facePartName2Index = facePartName2Index;\nvar facePartNames = ['topMid', 'rightTop0', 'rightTop1', 'leftTop0', 'leftTop1', 'rightJaw0', 'rightJaw1', 'rightJaw2', 'rightJaw3', 'rightJaw4', 'rightJaw5', 'rightJaw6', 'rightJaw7', 'jawMid', // 0 - 8\n'leftJaw7', 'leftJaw6', 'leftJaw5', 'leftJaw4', 'leftJaw3', 'leftJaw2', 'leftJaw1', 'leftJaw0', // 9 - 16\n'rightBrow0', 'rightBrow1', 'rightBrow2', 'rightBrow3', 'rightBrow4', // 17 - 21\n'leftBrow4', 'leftBrow3', 'leftBrow2', 'leftBrow1', 'leftBrow0', // 22 - 26\n'nose0', 'nose1', 'nose2', 'nose3', // 27 - 30\n'rightNose0', 'rightNose1', 'nose4', 'leftNose1', 'leftNose0', // 31 - 35\n'rightEye0', 'rightEye1', 'rightEye2', 'rightEye3', 'rightEye4', 'rightEye5', // 36 - 41\n'leftEye3', 'leftEye2', 'leftEye1', 'leftEye0', 'leftEye5', 'leftEye4', // 42 - 47\n'rightMouthCorner', 'rightUpperLipTop0', 'rightUpperLipTop1', 'upperLipTopMid', 'leftUpperLipTop1', 'leftUpperLipTop0', 'leftMouthCorner', // 48 - 54\n'leftLowerLipBottom0', 'leftLowerLipBottom1', 'lowerLipBottomMid', 'rightLowerLipBottom1', 'rightLowerLipBottom0', // 55 - 59\n'rightMiddleLip', 'rightUpperLipBottom1', 'upperLipBottomMid', 'leftUpperLipBottom1', 'leftMiddleLip', // 60 - 64\n'leftLowerLipTop0', 'lowerLipTopMid', 'rightLowerLipTop0' // 65 - 67\n];\nvar allPartNames = posePartNames.concat(facePartNames); // Represents a bone formed by two part keypoints.\n\nexports.allPartNames = allPartNames;\n\nvar Bone = /*#__PURE__*/function () {\n  function Bone() {\n    _classCallCheck(this, Bone);\n  }\n\n  _createClass(Bone, [{\n    key: \"set\",\n    value: function set(kp0, kp1, skeleton, type) {\n      this.name = \"\".concat(kp0.name, \"-\").concat(kp1.name);\n      this.kp0 = kp0;\n      this.kp1 = kp1;\n      this.skeleton = skeleton;\n      this.type = type;\n      this.boneColor = _colorUtils.ColorUtils.fromStringHash(this.name);\n      this.boneColor.saturation += 0.5;\n      return this;\n    }\n  }, {\n    key: \"getPointTransform\",\n    // Finds a point's bone transform.\n    // Let anchor be the closest point on the bone to the point.\n    // A point's bone transformation is the transformation from anchor to the point.\n    value: function getPointTransform(p) {\n      var dir = this.kp1.position.subtract(this.kp0.position).normalize();\n      var n = dir.clone();\n      n.angle += 90;\n\n      var closestP = _mathUtils.MathUtils.getClosestPointOnSegment(this.kp0.position, this.kp1.position, p);\n\n      var v = p.subtract(closestP);\n      var dirProjD = v.dot(dir);\n      var dirProjN = v.dot(n);\n      var d = this.kp0.position.subtract(this.kp1.position).length;\n      var anchorPerc = closestP.subtract(this.kp0.position).length / d;\n      return {\n        transform: new paper.default.Point(dirProjD, dirProjN),\n        anchorPerc: anchorPerc\n      };\n    } // Finds a point's current position from the current bone position.\n\n  }, {\n    key: \"transform\",\n    value: function transform(trans) {\n      if (!this.kp1.currentPosition || !this.kp0.currentPosition) {\n        return;\n      } // Scale distance from anchor point base on bone type.\n      // All face bones will share one distance scale. All body bones share another.\n\n\n      var scale = this.type === 'face' ? this.skeleton.currentFaceScale : this.skeleton.currentBodyScale;\n      var dir = this.kp1.currentPosition.subtract(this.kp0.currentPosition).normalize();\n      var n = dir.clone();\n      n.angle += 90;\n      var anchor = this.kp0.currentPosition.multiply(1 - trans.anchorPerc).add(this.kp1.currentPosition.multiply(trans.anchorPerc));\n      var p = anchor.add(dir.multiply(trans.transform.x * scale)).add(n.multiply(trans.transform.y * scale));\n      return p;\n    }\n  }]);\n\n  return Bone;\n}();\n\nexports.Bone = Bone;\n\nfunction getKeyPointFromSVG(group, partName) {\n  var shape = _svgUtils.SVGUtils.findFirstItemWithPrefix(group, partName);\n\n  return {\n    position: shape.bounds.center,\n    name: partName\n  };\n}\n\nfunction getPartFromPose(pose, name) {\n  if (!pose || !pose.keypoints) {\n    return null;\n  }\n\n  var part = pose.keypoints.find(function (kp) {\n    return kp.part === name;\n  });\n  return {\n    position: new paper.default.Point(part.position.x, part.position.y),\n    score: part.score\n  };\n}\n\nfunction getKeypointFromFaceFrame(face, i) {\n  if (!face || !face.scaledMesh || !face.scaledMesh.length) ;\n  return new paper.default.Point(face.positions[i * 2], face.positions[i * 2 + 1]);\n} // Represents a full body skeleton.\n\n\nvar Skeleton = /*#__PURE__*/function () {\n  function Skeleton(scope) {\n    var _this = this;\n\n    _classCallCheck(this, Skeleton);\n\n    var skeletonGroup = _svgUtils.SVGUtils.findFirstItemWithPrefix(scope.project, 'skeleton'); // Pose\n\n\n    var leftAnkle = getKeyPointFromSVG(skeletonGroup, 'leftAnkle');\n    var leftKnee = getKeyPointFromSVG(skeletonGroup, 'leftKnee');\n    var leftHip = getKeyPointFromSVG(skeletonGroup, 'leftHip');\n    var leftWrist = getKeyPointFromSVG(skeletonGroup, 'leftWrist');\n    var leftElbow = getKeyPointFromSVG(skeletonGroup, 'leftElbow');\n    var leftShoulder = getKeyPointFromSVG(skeletonGroup, 'leftShoulder');\n    var rightAnkle = getKeyPointFromSVG(skeletonGroup, 'rightAnkle');\n    var rightKnee = getKeyPointFromSVG(skeletonGroup, 'rightKnee');\n    var rightHip = getKeyPointFromSVG(skeletonGroup, 'rightHip');\n    var rightWrist = getKeyPointFromSVG(skeletonGroup, 'rightWrist');\n    var rightElbow = getKeyPointFromSVG(skeletonGroup, 'rightElbow');\n    var rightShoulder = getKeyPointFromSVG(skeletonGroup, 'rightShoulder'); // Face\n\n    var topMid = getKeyPointFromSVG(skeletonGroup, 'topMid');\n    var rightTop0 = getKeyPointFromSVG(skeletonGroup, 'rightTop0');\n    var rightTop1 = getKeyPointFromSVG(skeletonGroup, 'rightTop1');\n    var leftTop0 = getKeyPointFromSVG(skeletonGroup, 'leftTop0');\n    var leftTop1 = getKeyPointFromSVG(skeletonGroup, 'leftTop1');\n    var leftJaw2 = getKeyPointFromSVG(skeletonGroup, 'leftJaw2');\n    var leftJaw3 = getKeyPointFromSVG(skeletonGroup, 'leftJaw3');\n    var leftJaw4 = getKeyPointFromSVG(skeletonGroup, 'leftJaw4');\n    var leftJaw5 = getKeyPointFromSVG(skeletonGroup, 'leftJaw5');\n    var leftJaw6 = getKeyPointFromSVG(skeletonGroup, 'leftJaw6');\n    var leftJaw7 = getKeyPointFromSVG(skeletonGroup, 'leftJaw7');\n    var jawMid = getKeyPointFromSVG(skeletonGroup, 'jawMid');\n    var rightJaw2 = getKeyPointFromSVG(skeletonGroup, 'rightJaw2');\n    var rightJaw3 = getKeyPointFromSVG(skeletonGroup, 'rightJaw3');\n    var rightJaw4 = getKeyPointFromSVG(skeletonGroup, 'rightJaw4');\n    var rightJaw5 = getKeyPointFromSVG(skeletonGroup, 'rightJaw5');\n    var rightJaw6 = getKeyPointFromSVG(skeletonGroup, 'rightJaw6');\n    var rightJaw7 = getKeyPointFromSVG(skeletonGroup, 'rightJaw7');\n    var nose0 = getKeyPointFromSVG(skeletonGroup, 'nose0');\n    var nose1 = getKeyPointFromSVG(skeletonGroup, 'nose1');\n    var nose2 = getKeyPointFromSVG(skeletonGroup, 'nose2');\n    var nose3 = getKeyPointFromSVG(skeletonGroup, 'nose3');\n    var nose4 = getKeyPointFromSVG(skeletonGroup, 'nose4');\n    var leftNose0 = getKeyPointFromSVG(skeletonGroup, 'leftNose0');\n    var leftNose1 = getKeyPointFromSVG(skeletonGroup, 'leftNose1');\n    var rightNose0 = getKeyPointFromSVG(skeletonGroup, 'rightNose0');\n    var rightNose1 = getKeyPointFromSVG(skeletonGroup, 'rightNose1');\n    var leftEye0 = getKeyPointFromSVG(skeletonGroup, 'leftEye0');\n    var leftEye1 = getKeyPointFromSVG(skeletonGroup, 'leftEye1');\n    var leftEye2 = getKeyPointFromSVG(skeletonGroup, 'leftEye2');\n    var leftEye3 = getKeyPointFromSVG(skeletonGroup, 'leftEye3');\n    var leftEye4 = getKeyPointFromSVG(skeletonGroup, 'leftEye4');\n    var leftEye5 = getKeyPointFromSVG(skeletonGroup, 'leftEye5');\n    var rightEye0 = getKeyPointFromSVG(skeletonGroup, 'rightEye0');\n    var rightEye1 = getKeyPointFromSVG(skeletonGroup, 'rightEye1');\n    var rightEye2 = getKeyPointFromSVG(skeletonGroup, 'rightEye2');\n    var rightEye3 = getKeyPointFromSVG(skeletonGroup, 'rightEye3');\n    var rightEye4 = getKeyPointFromSVG(skeletonGroup, 'rightEye4');\n    var rightEye5 = getKeyPointFromSVG(skeletonGroup, 'rightEye5');\n    var leftBrow0 = getKeyPointFromSVG(skeletonGroup, 'leftBrow0');\n    var leftBrow1 = getKeyPointFromSVG(skeletonGroup, 'leftBrow1');\n    var leftBrow2 = getKeyPointFromSVG(skeletonGroup, 'leftBrow2');\n    var leftBrow3 = getKeyPointFromSVG(skeletonGroup, 'leftBrow3');\n    var leftBrow4 = getKeyPointFromSVG(skeletonGroup, 'leftBrow4');\n    var rightBrow0 = getKeyPointFromSVG(skeletonGroup, 'rightBrow0');\n    var rightBrow1 = getKeyPointFromSVG(skeletonGroup, 'rightBrow1');\n    var rightBrow2 = getKeyPointFromSVG(skeletonGroup, 'rightBrow2');\n    var rightBrow3 = getKeyPointFromSVG(skeletonGroup, 'rightBrow3');\n    var rightBrow4 = getKeyPointFromSVG(skeletonGroup, 'rightBrow4');\n    var leftMouthCorner = getKeyPointFromSVG(skeletonGroup, 'leftMouthCorner');\n    var leftUpperLipTop0 = getKeyPointFromSVG(skeletonGroup, 'leftUpperLipTop0');\n    var leftUpperLipTop1 = getKeyPointFromSVG(skeletonGroup, 'leftUpperLipTop1');\n    var upperLipTopMid = getKeyPointFromSVG(skeletonGroup, 'upperLipTopMid');\n    var rightMouthCorner = getKeyPointFromSVG(skeletonGroup, 'rightMouthCorner');\n    var rightUpperLipTop0 = getKeyPointFromSVG(skeletonGroup, 'rightUpperLipTop0');\n    var rightUpperLipTop1 = getKeyPointFromSVG(skeletonGroup, 'rightUpperLipTop1');\n    var rightMiddleLip = getKeyPointFromSVG(skeletonGroup, 'rightMiddleLip');\n    var rightUpperLipBottom1 = getKeyPointFromSVG(skeletonGroup, 'rightUpperLipBottom1');\n    var leftMiddleLip = getKeyPointFromSVG(skeletonGroup, 'leftMiddleLip');\n    var leftUpperLipBottom1 = getKeyPointFromSVG(skeletonGroup, 'leftUpperLipBottom1');\n    var upperLipBottomMid = getKeyPointFromSVG(skeletonGroup, 'upperLipBottomMid');\n    var rightLowerLipTop0 = getKeyPointFromSVG(skeletonGroup, 'rightLowerLipTop0');\n    var leftLowerLipTop0 = getKeyPointFromSVG(skeletonGroup, 'leftLowerLipTop0');\n    var lowerLipTopMid = getKeyPointFromSVG(skeletonGroup, 'lowerLipTopMid');\n    var rightLowerLipBottom0 = getKeyPointFromSVG(skeletonGroup, 'rightLowerLipBottom0');\n    var rightLowerLipBottom1 = getKeyPointFromSVG(skeletonGroup, 'rightLowerLipBottom1');\n    var leftLowerLipBottom0 = getKeyPointFromSVG(skeletonGroup, 'leftLowerLipBottom0');\n    var leftLowerLipBottom1 = getKeyPointFromSVG(skeletonGroup, 'leftLowerLipBottom1');\n    var lowerLipBottomMid = getKeyPointFromSVG(skeletonGroup, 'lowerLipBottomMid');\n    this.bLeftShoulderRightShoulder = new Bone().set(leftShoulder, rightShoulder, this, 'body');\n    this.bRightShoulderRightHip = new Bone().set(rightShoulder, rightHip, this, 'body');\n    this.bLeftHipRightHip = new Bone().set(leftHip, rightHip, this, 'body');\n    this.bLeftShoulderLeftHip = new Bone().set(leftShoulder, leftHip, this, 'body');\n    this.bLeftShoulderLeftElbow = new Bone().set(leftShoulder, leftElbow, this, 'body');\n    this.bLeftElbowLeftWrist = new Bone().set(leftElbow, leftWrist, this, 'body');\n    this.bRightShoulderRightElbow = new Bone().set(rightShoulder, rightElbow, this, 'body');\n    this.bRightElbowRightWrist = new Bone().set(rightElbow, rightWrist, this, 'body');\n    this.bLeftHipLeftKnee = new Bone().set(leftHip, leftKnee, this, 'body');\n    this.bLeftKneeLeftAnkle = new Bone().set(leftKnee, leftAnkle, this, 'body');\n    this.bRightHipRightKnee = new Bone().set(rightHip, rightKnee, this, 'body');\n    this.bRightKneeRightAnkle = new Bone().set(rightKnee, rightAnkle, this, 'body');\n    this.bTopMidRightTop0 = new Bone().set(topMid, rightTop0, this, 'face');\n    this.bTopMidLeftTop0 = new Bone().set(topMid, leftTop0, this, 'face');\n    this.bLeftTop0LeftTop1 = new Bone().set(leftTop0, leftTop1, this, 'face');\n    this.bLeftTop1LeftJaw2 = new Bone().set(leftTop1, leftJaw2, this, 'face');\n    this.bLeftJaw2LeftJaw3 = new Bone().set(leftJaw2, leftJaw3, this, 'face');\n    this.bLeftJaw3LeftJaw4 = new Bone().set(leftJaw3, leftJaw4, this, 'face');\n    this.bLeftJaw4LeftJaw5 = new Bone().set(leftJaw4, leftJaw5, this, 'face');\n    this.bLeftJaw5LeftJaw6 = new Bone().set(leftJaw5, leftJaw6, this, 'face');\n    this.bLeftJaw6LeftJaw7 = new Bone().set(leftJaw6, leftJaw7, this, 'face');\n    this.bLeftJaw7JawMid = new Bone().set(leftJaw7, jawMid, this, 'face');\n    this.bRightTop0RightTop1 = new Bone().set(rightTop0, rightTop1, this, 'face');\n    this.bRightTop1RightJaw2 = new Bone().set(rightTop1, rightJaw2, this, 'face');\n    this.bRightJaw2RightJaw3 = new Bone().set(rightJaw2, rightJaw3, this, 'face');\n    this.bRightJaw3RightJaw4 = new Bone().set(rightJaw3, rightJaw4, this, 'face');\n    this.bRightJaw4RightJaw5 = new Bone().set(rightJaw4, rightJaw5, this, 'face');\n    this.bRightJaw5RightJaw6 = new Bone().set(rightJaw5, rightJaw6, this, 'face');\n    this.bRightJaw6RightJaw7 = new Bone().set(rightJaw6, rightJaw7, this, 'face');\n    this.bRightJaw7JawMid = new Bone().set(rightJaw7, jawMid, this, 'face');\n    this.bLeftEye0LeftEye1 = new Bone().set(leftEye0, leftEye1, this, 'face');\n    this.bLeftEye1LeftEye2 = new Bone().set(leftEye1, leftEye2, this, 'face');\n    this.bLeftEye2LeftEye3 = new Bone().set(leftEye2, leftEye3, this, 'face');\n    this.bLeftEye3LeftEye4 = new Bone().set(leftEye3, leftEye4, this, 'face');\n    this.bLeftEye4LeftEye5 = new Bone().set(leftEye4, leftEye5, this, 'face');\n    this.bLeftEye5LeftEye0 = new Bone().set(leftEye5, leftEye0, this, 'face');\n    this.bRightEye0RightEye1 = new Bone().set(rightEye0, rightEye1, this, 'face');\n    this.bRightEye1RightEye2 = new Bone().set(rightEye1, rightEye2, this, 'face');\n    this.bRightEye2RightEye3 = new Bone().set(rightEye2, rightEye3, this, 'face');\n    this.bRightEye3RightEye4 = new Bone().set(rightEye3, rightEye4, this, 'face');\n    this.bRightEye4RightEye5 = new Bone().set(rightEye4, rightEye5, this, 'face');\n    this.bRightEye5RightEye0 = new Bone().set(rightEye5, rightEye0, this, 'face');\n    this.bLeftBrow0LeftBrow1 = new Bone().set(leftBrow0, leftBrow1, this, 'face');\n    this.bLeftBrow1LeftBrow2 = new Bone().set(leftBrow1, leftBrow2, this, 'face');\n    this.bLeftBrow2LeftBrow3 = new Bone().set(leftBrow2, leftBrow3, this, 'face');\n    this.bLeftBrow3LeftBrow4 = new Bone().set(leftBrow3, leftBrow4, this, 'face');\n    this.bRightBrow0RightBrow1 = new Bone().set(rightBrow0, rightBrow1, this, 'face');\n    this.bRightBrow1RightBrow2 = new Bone().set(rightBrow1, rightBrow2, this, 'face');\n    this.bRightBrow2RightBrow3 = new Bone().set(rightBrow2, rightBrow3, this, 'face');\n    this.bRightBrow3RightBrow4 = new Bone().set(rightBrow3, rightBrow4, this, 'face');\n    this.bNose0Nose1 = new Bone().set(nose0, nose1, this, 'face');\n    this.bNose1Nose2 = new Bone().set(nose1, nose2, this, 'face');\n    this.bNose2Nose3 = new Bone().set(nose2, nose3, this, 'face');\n    this.bNose3Nose4 = new Bone().set(nose3, nose4, this, 'face');\n    this.bLeftNose0LeftNose1 = new Bone().set(leftNose0, leftNose1, this, 'face');\n    this.bLeftNose1Nose4 = new Bone().set(leftNose1, nose4, this, 'face');\n    this.bRightNose0RightNose1 = new Bone().set(rightNose0, rightNose1, this, 'face');\n    this.bRightNose1Nose4 = new Bone().set(rightNose1, nose4, this, 'face');\n    this.bLeftMouthCornerLeftUpperLipTop0 = new Bone().set(leftMouthCorner, leftUpperLipTop0, this, 'face');\n    this.bLeftUpperLipTop0LeftUpperLipTop1 = new Bone().set(leftUpperLipTop0, leftUpperLipTop1, this, 'face');\n    this.bLeftUpperLipTop1UpperLipTopMid = new Bone().set(leftUpperLipTop1, upperLipTopMid, this, 'face');\n    this.bRigthMouthCornerRigthUpperLipTop0 = new Bone().set(rightMouthCorner, rightUpperLipTop0, this, 'face');\n    this.bRigthUpperLipTop0RigthUpperLipTop1 = new Bone().set(rightUpperLipTop0, rightUpperLipTop1, this, 'face');\n    this.bRigthUpperLipTop1UpperLipTopMid = new Bone().set(rightUpperLipTop1, upperLipTopMid, this, 'face');\n    this.bLeftMouthCornerLeftMiddleLip = new Bone().set(leftMouthCorner, leftMiddleLip, this, 'face');\n    this.bLeftMiddleLipLeftUpperLipBottom1 = new Bone().set(leftMiddleLip, leftUpperLipBottom1, this, 'face');\n    this.bLeftUpperLipBottom1UpperLipBottomMid = new Bone().set(leftUpperLipBottom1, upperLipBottomMid, this, 'face');\n    this.bRightMouthCornerRightMiddleLip = new Bone().set(rightMouthCorner, rightMiddleLip, this, 'face');\n    this.bRightMiddleLipRightUpperLipBottom1 = new Bone().set(rightMiddleLip, rightUpperLipBottom1, this, 'face');\n    this.bRightUpperLipBottom1UpperLipBototmMid = new Bone().set(rightUpperLipBottom1, upperLipBottomMid, this, 'face');\n    this.bLeftMiddleLipLeftLowerLipTop0 = new Bone().set(leftMiddleLip, leftLowerLipTop0, this, 'face');\n    this.bLeftLowerLipTop0LowerLipTopMid = new Bone().set(leftLowerLipTop0, lowerLipTopMid, this, 'face');\n    this.bRightMiddleLipRightLowerLipTop0 = new Bone().set(rightMiddleLip, rightLowerLipTop0, this, 'face');\n    this.bRightLowerLipTop0LowerLipTopMid = new Bone().set(rightLowerLipTop0, lowerLipTopMid, this, 'face');\n    this.bLeftMouthCornerLeftLowerLipBottom0 = new Bone().set(leftMouthCorner, leftLowerLipBottom0, this, 'face');\n    this.bLeftLowerLipBottom0LeftLowerLipBottom1 = new Bone().set(leftLowerLipBottom0, leftLowerLipBottom1, this, 'face');\n    this.bLeftLowerLipBottom1LowerLipBottomMid = new Bone().set(leftLowerLipBottom1, lowerLipBottomMid, this, 'face');\n    this.bRightMouthCornerRightLowerLipBottom0 = new Bone().set(rightMouthCorner, rightLowerLipBottom0, this, 'face');\n    this.bRightLowerLipBottom0RightLowerLipBottom1 = new Bone().set(rightLowerLipBottom0, rightLowerLipBottom1, this, 'face');\n    this.bRightLowerLipBottom1LowerLipBottomMid = new Bone().set(rightLowerLipBottom1, lowerLipBottomMid, this, 'face');\n    this.faceBones = [// Face\n    this.bTopMidRightTop0, this.bRightTop0RightTop1, this.bTopMidLeftTop0, this.bLeftTop0LeftTop1, this.bLeftTop1LeftJaw2, this.bLeftJaw2LeftJaw3, this.bLeftJaw3LeftJaw4, this.bLeftJaw4LeftJaw5, this.bLeftJaw5LeftJaw6, this.bLeftJaw6LeftJaw7, this.bLeftJaw7JawMid, this.bRightTop1RightJaw2, this.bRightJaw2RightJaw3, this.bRightJaw3RightJaw4, this.bRightJaw4RightJaw5, this.bRightJaw5RightJaw6, this.bRightJaw6RightJaw7, this.bRightJaw7JawMid, this.bLeftEye0LeftEye1, this.bLeftEye1LeftEye2, this.bLeftEye2LeftEye3, this.bLeftEye3LeftEye4, this.bLeftEye4LeftEye5, this.bLeftEye5LeftEye0, this.bRightEye0RightEye1, this.bRightEye1RightEye2, this.bRightEye2RightEye3, this.bRightEye3RightEye4, this.bRightEye4RightEye5, this.bRightEye5RightEye0, this.bLeftBrow0LeftBrow1, this.bLeftBrow1LeftBrow2, this.bLeftBrow2LeftBrow3, this.bLeftBrow3LeftBrow4, this.bRightBrow0RightBrow1, this.bRightBrow1RightBrow2, this.bRightBrow2RightBrow3, this.bRightBrow3RightBrow4, this.bNose0Nose1, this.bNose1Nose2, this.bNose2Nose3, this.bNose3Nose4, this.bLeftNose0LeftNose1, this.bLeftNose1Nose4, this.bRightNose0RightNose1, this.bRightNose1Nose4, this.bLeftMouthCornerLeftUpperLipTop0, this.bLeftUpperLipTop0LeftUpperLipTop1, this.bLeftUpperLipTop1UpperLipTopMid, this.bRigthMouthCornerRigthUpperLipTop0, this.bRigthUpperLipTop0RigthUpperLipTop1, this.bRigthUpperLipTop1UpperLipTopMid, this.bLeftMouthCornerLeftMiddleLip, this.bLeftMiddleLipLeftUpperLipBottom1, this.bLeftUpperLipBottom1UpperLipBottomMid, this.bRightMouthCornerRightMiddleLip, this.bRightMiddleLipRightUpperLipBottom1, this.bRightUpperLipBottom1UpperLipBototmMid, this.bLeftMiddleLipLeftLowerLipTop0, this.bLeftLowerLipTop0LowerLipTopMid, this.bRightMiddleLipRightLowerLipTop0, this.bRightLowerLipTop0LowerLipTopMid, this.bLeftMouthCornerLeftLowerLipBottom0, this.bLeftLowerLipBottom0LeftLowerLipBottom1, this.bLeftLowerLipBottom1LowerLipBottomMid, this.bRightMouthCornerRightLowerLipBottom0, this.bRightLowerLipBottom0RightLowerLipBottom1, this.bRightLowerLipBottom1LowerLipBottomMid];\n    this.bodyBones = [// Body\n    this.bLeftShoulderRightShoulder, this.bRightShoulderRightHip, this.bLeftHipRightHip, this.bLeftShoulderLeftHip, this.bLeftShoulderLeftElbow, this.bLeftElbowLeftWrist, this.bRightShoulderRightElbow, this.bRightElbowRightWrist, this.bLeftHipLeftKnee, this.bLeftKneeLeftAnkle, this.bRightHipRightKnee, this.bRightKneeRightAnkle];\n    this.bones = this.faceBones.concat(this.bodyBones);\n    this.secondaryBones = [];\n    this.parts = {};\n    this.bodyLen0 = this.getTotalBoneLength(this.bodyBones);\n    this.faceLen0 = this.getTotalBoneLength(this.faceBones);\n    this.boneGroups = {\n      'torso': [this.bLeftShoulderRightShoulder, this.bRightShoulderRightHip, this.bLeftHipRightHip, this.bLeftShoulderLeftHip],\n      'leftLeg': [this.bLeftHipLeftKnee, this.bLeftKneeLeftAnkle],\n      'rightLeg': [this.bRightHipRightKnee, this.bRightKneeRightAnkle],\n      'leftArm': [this.bLeftShoulderLeftElbow, this.bLeftElbowLeftWrist],\n      'rightArm': [this.bRightElbowRightWrist, this.bRightShoulderRightElbow],\n      'face': this.faceBones\n    };\n    this.faceBones.forEach(function (bone) {\n      var parts = [bone.kp0, bone.kp1];\n      parts.forEach(function (part) {\n        part.baseTransFunc = _mathUtils.MathUtils.getTransformFunc(_this.bLeftJaw2LeftJaw3.kp0.position, _this.bRightJaw2RightJaw3.kp0.position, part.position);\n      });\n    });\n  }\n\n  _createClass(Skeleton, [{\n    key: \"update\",\n    value: function update(pose, face) {\n      var _this2 = this;\n\n      if (pose.score < MIN_POSE_SCORE) {\n        this.isValid = false;\n        return;\n      }\n\n      this.isValid = this.updatePoseParts(pose);\n      if (!this.isValid) return;\n      this.isValid = this.updateFaceParts(face);\n      if (!this.isValid) return; // Update bones.\n\n      this.bones.forEach(function (bone) {\n        var part0 = _this2.parts[bone.kp0.name];\n        var part1 = _this2.parts[bone.kp1.name];\n        bone.kp0.currentPosition = part0.position;\n        bone.kp1.currentPosition = part1.position;\n        bone.score = (part0.score + part1.score) / 2;\n        bone.latestCenter = bone.kp1.currentPosition.add(bone.kp0.currentPosition).divide(2);\n      }); // Update secondary bones.\n\n      var nosePos = this.bNose3Nose4.kp1.currentPosition;\n      this.secondaryBones.forEach(function (bone) {\n        bone.kp0.currentPosition = bone.kp0.transformFunc(bone.parent.kp0.currentPosition, nosePos);\n        bone.kp1.currentPosition = bone.kp1.transformFunc(bone.parent.kp1.currentPosition, nosePos);\n        bone.score = bone.parent.score;\n        bone.latestCenter = bone.kp1.currentPosition.add(bone.kp0.currentPosition).divide(2);\n      }); // Recompute face & body bone scale.\n\n      this.currentFaceScale = this.getTotalBoneLength(this.faceBones) / this.faceLen0;\n      this.currentBodyScale = this.getTotalBoneLength(this.bodyBones) / this.bodyLen0;\n      this.isValid = true;\n    }\n  }, {\n    key: \"updatePoseParts\",\n    value: function updatePoseParts(pose) {\n      var _this3 = this;\n\n      posePartNames.forEach(function (partName) {\n        // Use new and old pose's confidence scores as weights to compute the new part position.\n        var part1 = getPartFromPose(pose, partName);\n        var part0 = _this3.parts[partName] || part1;\n        var weight0 = part0.score / (part1.score + part0.score);\n        var weight1 = part1.score / (part1.score + part0.score);\n        var pos = part0.position.multiply(weight0).add(part1.position.multiply(weight1));\n        _this3.parts[partName] = {\n          position: pos,\n          score: part0.score * weight0 + part1.score * weight1\n        };\n      });\n\n      if (!this.parts['rightEar'] || !this.parts['leftEar']) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"updateFaceParts\",\n    value: function updateFaceParts(face) {\n      var _this4 = this;\n\n      var posLeftEar = this.parts['leftEar'].position;\n      var posRightEar = this.parts['rightEar'].position;\n\n      if (face && face.positions && face.positions.length && face.faceInViewConfidence > MIN_FACE_SCORE) {\n        // Valid face results.\n        for (var i = 0; i < facePartNames.length; i++) {\n          var partName = facePartNames[i];\n          var pos = getKeypointFromFaceFrame(face, i);\n          if (!pos) continue;\n          this.parts[partName] = {\n            position: pos,\n            score: face.faceInViewConfidence\n          };\n        } // Keep track of the transformation from pose ear positions to face ear positions.\n        // This can be used to infer face position when face tracking is lost.\n\n\n        this.leftEarP2FFunc = _mathUtils.MathUtils.getTransformFunc(posLeftEar, posRightEar, this.parts['leftJaw2'].position);\n        this.rightEarP2FFunc = _mathUtils.MathUtils.getTransformFunc(posLeftEar, posRightEar, this.parts['rightJaw2'].position);\n      } else {\n        // Invalid face keypoints. Infer face keypoints from pose.\n        var fLeftEar = this.leftEarP2FFunc ? this.leftEarP2FFunc(posLeftEar, posRightEar) : posLeftEar;\n        var fRightEar = this.rightEarP2FFunc ? this.rightEarP2FFunc(posLeftEar, posRightEar) : posRightEar; // Also infer face scale from pose.\n\n        this.currentFaceScale = this.currentBodyScale;\n        this.faceBones.forEach(function (bone) {\n          var parts = [bone.kp0, bone.kp1];\n          parts.forEach(function (part) {\n            _this4.parts[part.name] = {\n              position: part.baseTransFunc(fLeftEar, fRightEar),\n              score: 1\n            };\n          });\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"findBoneGroup\",\n    value: function findBoneGroup(point) {\n      var _this5 = this;\n\n      var minDistances = {};\n      Object.keys(this.boneGroups).forEach(function (boneGroupKey) {\n        var minDistance = Infinity;\n        var boneGroup = _this5.boneGroups[boneGroupKey];\n        boneGroup.forEach(function (bone) {\n          var d = _mathUtils.MathUtils.getClosestPointOnSegment(bone.kp0.position, bone.kp1.position, point).getDistance(point);\n\n          minDistance = Math.min(minDistance, d);\n        });\n        minDistances[boneGroupKey] = minDistance;\n      });\n      var minDistance = Math.min.apply(Math, _toConsumableArray(Object.values(minDistances)));\n      var selectedGroups = [];\n      Object.keys(minDistances).forEach(function (key) {\n        var distance = minDistances[key];\n\n        if (distance <= minDistance) {\n          selectedGroups.push(_this5.boneGroups[key]);\n        }\n      });\n      return selectedGroups.flatten();\n    }\n  }, {\n    key: \"getTotalBoneLength\",\n    value: function getTotalBoneLength(bones) {\n      var totalLen = 0;\n      bones.forEach(function (bone) {\n        var d = (bone.kp0.currentPosition || bone.kp0.position).subtract(bone.kp1.currentPosition || bone.kp1.position);\n        totalLen += d.length;\n      });\n      return totalLen;\n    }\n  }, {\n    key: \"debugDraw\",\n    value: function debugDraw(scope) {\n      var group = new scope.Group();\n      scope.project.activeLayer.addChild(group);\n      this.bones.forEach(function (bone) {\n        var path = new scope.Path({\n          segments: [bone.kp0.currentPosition, bone.kp1.currentPosition],\n          strokeWidth: 2,\n          strokeColor: bone.boneColor\n        });\n        group.addChild(path);\n      }); // this.secondaryBones.forEach(bone => {\n      //     let path = new scope.Path({\n      //         segments: [bone.kp0.currentPosition, bone.kp1.currentPosition],\n      //         strokeColor: '#00ff00',\n      //         strokeWidth: 5,\n      //     });\n      //     group.addChild(path);\n      // });\n    }\n  }, {\n    key: \"debugDrawLabels\",\n    value: function debugDrawLabels(scope) {\n      var group = new scope.Group();\n      scope.project.activeLayer.addChild(group);\n      this.bones.forEach(function (bone) {\n        var addLabel = function addLabel(kp, name) {\n          var text = new scope.PointText({\n            point: [kp.currentPosition.x, kp.currentPosition.y],\n            content: name,\n            fillColor: 'black',\n            fontSize: 7\n          });\n          group.addChild(text);\n        };\n\n        addLabel(bone.kp0, bone.kp0.name);\n        addLabel(bone.kp1, bone.kp1.name);\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.parts = [];\n    }\n  }], [{\n    key: \"getCurrentPosition\",\n    value: function getCurrentPosition(segment) {\n      var position = new paper.default.Point();\n      Object.keys(segment.skinning).forEach(function (boneName) {\n        var bt = segment.skinning[boneName];\n        position = position.add(bt.bone.transform(bt.transform).multiply(bt.weight));\n      });\n      return position;\n    }\n  }, {\n    key: \"flipPose\",\n    value: function flipPose(pose) {\n      pose.keypoints.forEach(function (kp) {\n        if (kp.part && kp.part.startsWith('left')) {\n          kp.part = 'right' + kp.part.substring('left'.length, kp.part.length);\n        } else if (kp.part && kp.part.startsWith('right')) {\n          kp.part = 'left' + kp.part.substring('right'.length, kp.part.length);\n        }\n      });\n    }\n  }, {\n    key: \"flipFace\",\n    value: function flipFace(face) {\n      Object.keys(facePartName2Index).forEach(function (partName) {\n        if (partName.startsWith('left')) {\n          var rightName = 'right' + partName.substr('left'.length, partName.length);\n          var temp = face.scaledMesh[facePartName2Index[partName]];\n          face.scaledMesh[facePartName2Index[partName]] = face.scaledMesh[facePartName2Index[rightName]];\n          face.scaledMesh[facePartName2Index[rightName]] = temp;\n        }\n      });\n    }\n  }, {\n    key: \"getBoundingBox\",\n    value: function getBoundingBox(pose) {\n      var minX = 100000;\n      var maxX = -100000;\n      var minY = 100000;\n      var maxY = -100000;\n\n      var updateMinMax = function updateMinMax(x, y) {\n        minX = Math.min(x, minX);\n        maxX = Math.max(x, maxX);\n        minY = Math.min(y, minY);\n        maxY = Math.max(y, maxY);\n      };\n\n      pose.frames.forEach(function (frame) {\n        frame.pose.keypoints.forEach(function (kp) {\n          updateMinMax(kp.position.x, kp.position.y);\n        });\n        var faceKeypoints = frame.face.positions;\n\n        for (var i = 0; i < faceKeypoints.length; i += 2) {\n          updateMinMax(faceKeypoints[i], faceKeypoints[i + 1]);\n        }\n      });\n      return [minX, maxX, minY, maxY];\n    }\n  }, {\n    key: \"translatePose\",\n    value: function translatePose(pose, d) {\n      pose.frames.forEach(function (frame) {\n        frame.pose.keypoints.forEach(function (kp) {\n          kp.position.x += d.x;\n          kp.position.y += d.y;\n        });\n        var faceKeypoints = frame.face.positions;\n\n        for (var i = 0; i < faceKeypoints.length; i += 2) {\n          faceKeypoints[i] += d.x;\n          faceKeypoints[i + 1] += d.y;\n        }\n      });\n    }\n  }, {\n    key: \"resizePose\",\n    value: function resizePose(pose, origin, scale) {\n      pose.frames.forEach(function (frame) {\n        frame.pose.keypoints.forEach(function (kp) {\n          kp.position.x = origin.x + (kp.position.x - origin.x) * scale.x;\n          kp.position.y = origin.y + (kp.position.y - origin.y) * scale.y;\n        });\n        var faceKeypoints = frame.face.positions;\n\n        for (var i = 0; i < faceKeypoints.length; i += 2) {\n          faceKeypoints[i] = origin.x + (faceKeypoints[i] - origin.x) * scale.x;\n          faceKeypoints[i + 1] = origin.y + (faceKeypoints[i + 1] - origin.y) * scale.y;\n        }\n      });\n    }\n  }, {\n    key: \"toFaceFrame\",\n    value: function toFaceFrame(faceDetection) {\n      var frame = {\n        positions: [],\n        faceInViewConfidence: faceDetection.faceInViewConfidence\n      };\n\n      for (var i = 0; i < facePartNames.length; i++) {\n        var partName = facePartNames[i];\n        var p = faceDetection.scaledMesh[facePartName2Index[partName]];\n        frame.positions.push(p[0]);\n        frame.positions.push(p[1]);\n      }\n\n      return frame;\n    }\n  }]);\n\n  return Skeleton;\n}();\n\nexports.Skeleton = Skeleton;"},"sourceMaps":null,"error":null,"hash":"74e28d59fb024369489712576b54b4f7","cacheData":{"env":{}}}